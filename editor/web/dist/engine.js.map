{
  "version": 3,
  "sources": ["../../../engine/behavior/behavior.ts", "../../../engine/signal.ts", "../../../engine/signals/behavior-lifecycle.ts", "../../../engine/entity/entity.ts", "../../../engine/internal.ts", "../../../engine/math/lerp.ts", "../../../engine/math/vector/vector2.ts", "../../../engine/math/entity-transform.ts", "../../../engine/math/spatial-transforms.ts", "../../../engine/input/action.ts", "../../../engine/input/input.ts", "../../../engine/input/inputs.ts", "../../../engine/signals/actions.ts", "../../../engine/signals/camera.ts", "../../../engine/signals/entity-collision.ts", "../../../engine/signals/entity-lifecycle.ts", "../../../engine/game.ts", "../../../engine/behavior/behavior-loader.ts", "../../../engine/physics.ts", "../../../engine/renderer/renderer.ts", "../../../engine/time.ts", "../../../engine/ui.ts", "../../../engine/value/data.ts", "../../../engine/value/registry.ts", "../../../engine/value/value.ts", "../../../engine/value/adapters/entity-by-ref-adapter.ts", "../../../engine/value/adapters/enum-adapter.ts", "../../../engine/value/adapters/texture-adapter.ts", "../../../engine/value/adapters/vector-adapter.ts", "../../../engine/signals/game-events.ts", "../../../engine/signals/mouse.ts", "../../../engine/signals/multiplayer.ts", "../../../engine/entity/entity-store.ts", "../../../engine/entity/entity-roots.ts", "../../../engine/entity/pixi-entity.ts", "../../../engine/entity/entities/animated-sprite.ts", "../../../engine/entity/entities/box-resize.ts", "../../../engine/entity/entities/camera.ts", "../../../engine/entity/entities/clickable.ts", "../../../engine/entity/entities/collider.ts", "../../../engine/entity/entities/empty.ts", "../../../engine/entity/entities/gizmo.ts", "../../../engine/entity/entities/rigidbody.ts", "../../../engine/entity/entities/sprite.ts", "../../../engine/entity/entities/tiling-sprite.ts", "../../../engine/entity/entities/ui-layer.ts", "../../../engine/entity/entities/ui-panel.ts", "../../../engine/signals/entity-updates.ts"],
  "sourcesContent": ["import { generateCUID } from \"@dreamlab/vendor/cuid.ts\";\nimport type { ConditionalExcept } from \"@dreamlab/vendor/type-fest.ts\";\n\nimport { Entity } from \"../entity/mod.ts\";\nimport { Game } from \"../game.ts\";\nimport {\n  ISignalHandler,\n  Signal,\n  SignalConstructor,\n  SignalConstructorMatching,\n  SignalListener,\n  SignalMatching,\n} from \"../signal.ts\";\nimport { BehaviorDestroyed } from \"../signals/behavior-lifecycle.ts\";\nimport { EntityUpdate } from \"../signals/entity-updates.ts\";\nimport { GamePostTick, GamePreTick, GameRender } from \"../signals/game-events.ts\";\nimport { Primitive, Value, ValueTypeTag, inferValueTypeTag } from \"../value/mod.ts\";\n\nexport interface BehaviorContext {\n  game: Game;\n  entity: Entity;\n  ref?: string;\n  values?: Record<string, Primitive>;\n}\n\nexport type BehaviorConstructor<B extends Behavior = Behavior> = (new (\n  ctx: BehaviorContext,\n) => B) & {\n  onLoaded?(game: Game): void;\n};\n\n// prettier-ignore\n\nexport interface BehaviorDefinition<B extends Behavior = Behavior> {\n  type: BehaviorConstructor<B>;\n  values?: Partial<Omit<B, keyof Behavior>>;\n  _ref?: string;\n}\n\ntype BehaviorValueProp<B extends Behavior> = Exclude<\n  // deno-lint-ignore ban-types\n  keyof ConditionalExcept<B, Function>,\n  keyof Behavior\n>;\ntype BehaviorValueOpts<B extends Behavior, P extends BehaviorValueProp<B>> = {\n  type?: ValueTypeTag<B[P]>;\n  description?: string;\n  replicated?: boolean;\n};\n\nexport class Behavior implements ISignalHandler {\n  readonly game: Game;\n  readonly entity: Entity;\n\n  protected get time() {\n    return this.game.time;\n  }\n  protected get inputs() {\n    return this.game.inputs;\n  }\n\n  readonly ref: string = generateCUID(\"bhv\");\n\n  // #region Values\n  #defaultValues: Record<string, unknown> = {};\n  #values = new Map<string, Value>();\n  get values(): ReadonlyMap<string, Value> {\n    return this.#values;\n  }\n\n  protected defineValues<B extends Behavior, Props extends BehaviorValueProp<B>[]>(\n    eType: BehaviorConstructor<B>,\n    ...props: {\n      [I in keyof Props]: Props[I] extends BehaviorValueProp<B> ? Props[I] : never;\n    }\n  ) {\n    for (const prop of props) {\n      this.value(eType, prop);\n    }\n  }\n\n  protected value<B extends Behavior>(\n    bType: BehaviorConstructor<B>, // can't just be `this` because TypeScript :(\n    prop: BehaviorValueProp<B>,\n    opts: BehaviorValueOpts<B, typeof prop> = {},\n  ): Value<B[typeof prop]> {\n    if (!(this instanceof bType))\n      throw new TypeError(`${this.constructor} is not an instance of ${bType}`);\n\n    const identifier = `${this.entity.ref}/${this.ref}/${prop}`;\n    if (this.#values.has(identifier))\n      throw new Error(`A value with the identifier '${identifier}' already exists!`);\n\n    type T = Value<B[typeof prop]>[\"value\"];\n    let defaultValue: T = this[prop] as T;\n    if (this.#defaultValues[prop]) defaultValue = this.#defaultValues[prop] as T;\n\n    const value = new Value(\n      this.game.values,\n      identifier,\n      defaultValue,\n      opts.type ?? (inferValueTypeTag(defaultValue) as ValueTypeTag<B[typeof prop]>),\n      opts.description ?? prop,\n    );\n    if (opts.replicated) value.replicated = opts.replicated;\n\n    Object.defineProperty(this, prop, {\n      configurable: true,\n      enumerable: true,\n      set: v => {\n        value.value = v;\n      },\n      get: () => value.value,\n    });\n\n    this.#values.set(prop, value as Value<unknown>);\n\n    return value;\n  }\n  // #endregion\n\n  // #region External Listeners\n  readonly listeners: [\n    receiver: WeakRef<ISignalHandler>,\n    type: SignalConstructor,\n    listener: SignalListener,\n  ][] = [];\n\n  protected listen<S extends Signal, T extends ISignalHandler>(\n    receiver: T,\n    signalType: SignalConstructor<SignalMatching<S, T>>,\n    signalListener: SignalListener<SignalMatching<S, T>>,\n  ) {\n    const boundSignalListener = signalListener.bind(this);\n\n    receiver.on(signalType, boundSignalListener);\n    this.listeners.push([\n      new WeakRef(receiver as ISignalHandler),\n      signalType as SignalConstructor,\n      boundSignalListener as SignalListener,\n    ]);\n  }\n  // #endregion\n\n  // #region Signals\n  #signalListenerMap = new Map<SignalConstructor, SignalListener[]>();\n\n  fire<\n    S extends Signal,\n    C extends SignalConstructorMatching<S, this & Behavior>,\n    A extends ConstructorParameters<C>,\n  >(ctor: C, ...args: A) {\n    const listeners = this.#signalListenerMap.get(ctor);\n    if (!listeners) return;\n\n    const signal = new ctor(...args);\n    listeners.forEach(l => l(signal));\n  }\n\n  on<S extends Signal>(\n    type: SignalConstructorMatching<S, this & Behavior>,\n    listener: SignalListener<S>,\n  ) {\n    const listeners = this.#signalListenerMap.get(type) ?? [];\n    listeners.push(listener as SignalListener);\n    this.#signalListenerMap.set(type, listeners);\n  }\n\n  unregister<T extends Signal>(type: SignalConstructor<T>, listener: SignalListener<T>) {\n    const listeners = this.#signalListenerMap.get(type);\n    if (!listeners) return;\n    const idx = listeners.indexOf(listener as SignalListener);\n    if (idx !== -1) listeners.splice(idx, 1);\n  }\n  // #endregion\n\n  constructor(ctx: BehaviorContext) {\n    this.game = ctx.game;\n    this.entity = ctx.entity;\n\n    if (ctx.ref) this.ref = ctx.ref;\n    if (ctx.values) this.#defaultValues = ctx.values;\n  }\n\n  destroy() {\n    this.fire(BehaviorDestroyed);\n\n    const idx = this.entity.behaviors.indexOf(this);\n    if (idx !== -1) this.entity.behaviors.splice(idx);\n\n    for (const value of this.#values.values()) value.destroy();\n    for (const [receiverRef, type, listener] of this.listeners) {\n      const receiver = receiverRef.deref();\n      if (!receiver) continue;\n      receiver.unregister(type, listener);\n    }\n  }\n\n  [Symbol.dispose]() {\n    this.destroy();\n  }\n\n  spawn(): void {\n    this.onInitialize();\n\n    if (this.onTick) {\n      const onTick = this.onTick.bind(this);\n      this.listen(this.entity, EntityUpdate, () => {\n        if (!this.game.paused) onTick();\n      });\n    }\n\n    if (this.onPreTick) {\n      const onPreTick = this.onPreTick.bind(this);\n      this.listen(this.entity.game, GamePreTick, () => {\n        if (!this.game.paused) onPreTick();\n      });\n    }\n\n    if (this.onFrame) {\n      const onFrame = this.onFrame.bind(this);\n      this.listen(this.entity.game, GameRender, () => onFrame());\n    }\n\n    if (this.onPostTick) {\n      const onPostTick = this.onPostTick.bind(this);\n      this.listen(this.entity.game, GamePostTick, () => {\n        if (!this.game.paused) onPostTick();\n      });\n    }\n  }\n\n  onInitialize(): void {}\n  onPreTick?(): void;\n  onTick?(): void;\n  onPostTick?(): void;\n  onFrame?(): void;\n}\n", "export type Signal = object;\n\nexport const exclusiveSignalType = Symbol.for(\"dreamlab.exclusiveSignalType\");\nexport interface ExclusiveSignal<T> {\n  [exclusiveSignalType]:\n    | // deno-lint-ignore no-explicit-any\n    (new (...args: any[]) => T)\n    // deno-lint-ignore no-explicit-any\n    | (abstract new (...args: any[]) => T);\n}\n\nexport type SignalMatching<Sig extends Signal, Recv> =\n  Sig extends ExclusiveSignal<infer ExclType> ? (Recv extends ExclType ? Sig : never) : Sig;\n\nexport type SignalConstructor<T extends Signal = Signal> = new (\n  // deno-lint-ignore no-explicit-any\n  ...args: any[]\n) => T;\nexport type SignalListener<T extends Signal = Signal> = (signal: T) => void;\n\nexport type SignalConstructorMatching<Sig extends Signal, Recv> =\n  Sig extends ExclusiveSignal<infer ExclType>\n    ? Recv extends ExclType\n      ? SignalConstructor<Sig>\n      : never\n    : SignalConstructor<Sig>;\n\nexport interface ISignalHandler {\n  fire<S extends Signal, C extends SignalConstructor<S>, A extends ConstructorParameters<C>>(\n    ctor: C,\n    ...args: A\n  ): void;\n  on<S extends Signal>(\n    type: SignalConstructor<SignalMatching<S, this>>,\n    listener: SignalListener<SignalMatching<S, this>>,\n  ): void;\n  unregister<T extends Signal>(type: SignalConstructor<T>, listener: SignalListener<T>): void;\n}\n\nexport class BasicSignalHandler<Self> implements ISignalHandler {\n  #signalListenerMap = new Map<SignalConstructor, SignalListener[]>();\n\n  fire<S extends Signal, C extends SignalConstructor<S>, A extends ConstructorParameters<C>>(\n    ctor: C,\n    ...args: A\n  ) {\n    const listeners = this.#signalListenerMap.get(ctor);\n    if (!listeners) return;\n\n    const signal = new ctor(...args);\n    listeners.forEach(l => l(signal));\n  }\n\n  on<S extends Signal>(type: SignalConstructorMatching<S, Self>, listener: SignalListener<S>) {\n    const listeners = this.#signalListenerMap.get(type) ?? [];\n    listeners.push(listener as SignalListener);\n    this.#signalListenerMap.set(type, listeners);\n  }\n\n  unregister<T extends Signal>(type: SignalConstructor<T>, listener: SignalListener<T>) {\n    const listeners = this.#signalListenerMap.get(type);\n    if (!listeners) return;\n    const idx = listeners.indexOf(listener as SignalListener);\n    if (idx !== -1) listeners.splice(idx, 1);\n  }\n}\n", "import { Behavior } from \"../mod.ts\";\nimport { exclusiveSignalType } from \"../signal.ts\";\n\nexport class BehaviorDestroyed {\n  [exclusiveSignalType] = Behavior;\n}\n", "import { generateCUID } from \"@dreamlab/vendor/cuid.ts\";\nimport type { ConditionalExcept } from \"@dreamlab/vendor/type-fest.ts\";\n\nimport { Behavior, BehaviorConstructor, BehaviorDefinition } from \"../behavior/behavior.ts\";\nimport type { Game } from \"../game.ts\";\nimport * as internal from \"../internal.ts\";\nimport {\n  IVector2,\n  Transform,\n  TransformOptions,\n  Vector2,\n  lerpAngle,\n  transformLocalToWorld,\n  transformWorldToLocal,\n} from \"../math/mod.ts\";\nimport { ConnectionId } from \"../network.ts\";\nimport {\n  ISignalHandler,\n  Signal,\n  SignalConstructor,\n  SignalConstructorMatching,\n  SignalListener,\n  SignalMatching,\n} from \"../signal.ts\";\nimport {\n  EntityChildDestroyed,\n  EntityChildRenamed,\n  EntityChildReparented,\n  EntityChildSpawned,\n  EntityDescendantDestroyed,\n  EntityDescendantRenamed,\n  EntityDescendantReparented,\n  EntityDescendantSpawned,\n  EntityDestroyed,\n  EntityExclusiveAuthorityChanged,\n  EntityMove,\n  EntityPreUpdate,\n  EntityRenamed,\n  EntityReparented,\n  EntityResize,\n  EntityRotate,\n  EntitySpawned,\n  EntityTransformUpdate,\n  EntityUpdate,\n  EntityZChanged,\n} from \"../signals/mod.ts\";\nimport { JsonValue, Value, ValueTypeTag, inferValueTypeTag } from \"../value/mod.ts\";\nimport type { Root } from \"./entity-roots.ts\";\n\nexport interface EntityContext {\n  game: Game;\n  name: string;\n  parent?: Entity;\n  transform?: TransformOptions;\n  authority?: ConnectionId;\n  ref?: string;\n  values?: Record<string, JsonValue>;\n}\n\nexport type EntityConstructor<\n  T extends Entity = Entity,\n  Abstract extends boolean = false,\n> = Abstract extends true\n  ? abstract new (ctx: EntityContext) => T\n  : new (ctx: EntityContext) => T;\n\n// prettier-ignore\n\nexport interface EntityDefinition<\n  T extends Entity = Entity,\n  // deno-lint-ignore no-explicit-any\n  Children extends any[] = any[],\n  // deno-lint-ignore no-explicit-any\n  Behaviors extends any[] = any[],\n> {\n  type: EntityConstructor<T>;\n  name: string;\n  transform?: TransformOptions;\n  authority?: ConnectionId;\n  values?: Partial<Omit<T, keyof Entity>>;\n  children?: { [I in keyof Children]: EntityDefinition<Children[I]> };\n  behaviors?: { [I in keyof Behaviors]: BehaviorDefinition<Behaviors[I]> };\n  _ref?: string;\n}\n\ntype EntityValueProp<E extends Entity> = Exclude<\n  // deno-lint-ignore ban-types\n  keyof ConditionalExcept<E, Function>,\n  keyof Entity\n>;\ntype EntityValueOpts<E extends Entity, P extends EntityValueProp<E>> = {\n  type?: ValueTypeTag<E[P]>;\n  description?: string;\n  replicated?: boolean;\n};\n\nexport abstract class Entity implements ISignalHandler {\n  static readonly icon: string | undefined;\n\n  disabled: boolean = false;\n\n  readonly game: Game;\n  protected get time() {\n    return this.game.time;\n  }\n  protected get inputs() {\n    return this.game.inputs;\n  }\n\n  // #region Name / ID / Hierarchy\n  #name: string;\n  get name(): string {\n    return this.#name;\n  }\n  set name(name: string) {\n    const oldName = this.#name;\n    this.#name = name;\n    const parent = this.parent;\n    if (parent) {\n      parent.removeChild(this, oldName);\n      parent.append(this);\n    }\n    this.#recomputeId();\n    this.fire(EntityRenamed, oldName);\n\n    if (this.parent) {\n      this.parent.fire(EntityChildRenamed, this, oldName);\n    }\n\n    let ancestor = this.parent;\n    while (ancestor) {\n      ancestor.fire(EntityDescendantRenamed, this, oldName);\n      ancestor = ancestor.parent;\n    }\n  }\n\n  readonly id: string;\n  readonly root: Root;\n\n  #parent: Entity | undefined;\n  get parent(): Entity | undefined {\n    return this.#parent;\n  }\n  set parent(parent: Entity | undefined) {\n    if (parent) {\n      // sets #parent:\n      parent.append(this);\n      this.#recomputeId();\n      this.#updateTransform(true);\n    } else if (this.parent) {\n      this.destroy();\n    }\n  }\n\n  #children: Map<string, Entity> = new Map();\n  get children(): ReadonlyMap<string, Entity> {\n    return this.#children;\n  }\n  append(child: Entity) {\n    let nonConflictingName: string | undefined;\n    if (this.#children.has(child.name))\n      nonConflictingName = this.#findNonConflictingName(child);\n\n    const oldParent = child.#parent;\n    if (oldParent) {\n      const oldChildren = oldParent.#children;\n      oldChildren.delete(child.#name);\n    }\n\n    this.#children.set(nonConflictingName ?? child.name, child);\n    child.#parent = this;\n\n    if (oldParent) {\n      // fire reparent events:\n\n      child.fire(EntityReparented, oldParent);\n      this.fire(EntityChildReparented, child, oldParent);\n      // deno-lint-ignore no-this-alias\n      let ancestor: Entity | undefined = this;\n      while (ancestor) {\n        ancestor.fire(EntityDescendantReparented, child, oldParent);\n        ancestor = ancestor.parent;\n      }\n    }\n\n    if (nonConflictingName) {\n      const oldName = child.#name;\n      child.#name = nonConflictingName;\n      child.#recomputeId();\n      child.fire(EntityRenamed, oldName);\n    }\n  }\n  removeChild(child: Entity, name?: string) {\n    if (child.parent !== this) return;\n    this.#children.delete(name ?? child.name);\n    child.#parent = undefined;\n  }\n\n  #findNonConflictingName(child: Entity): string {\n    const matches = child.name.match(/(?<base>.*)\\.(?<n>\\d+)/)?.groups;\n    const baseName = matches?.base ?? child.name;\n\n    // linear search for first 1000\n    for (let n = matches?.n ? +matches.n : 1; n <= 999; n++) {\n      const suffix = n;\n      const potentialName = baseName + \".\" + suffix;\n      if (!this.#children.has(potentialName)) {\n        return potentialName;\n      }\n    }\n\n    // binary search past 1000\n    let left = 1000;\n    let right = Number.MAX_SAFE_INTEGER;\n\n    while (left <= right) {\n      const mid = Math.floor((left + right) / 2);\n      const potentialName = baseName + \".\" + mid;\n\n      if (!this.#children.has(potentialName)) {\n        // Check if the previous number is taken\n        if (mid === 1000 || this.#children.has(baseName + \".\" + (mid - 1))) {\n          return potentialName;\n        }\n        // If not, continue searching in the lower half\n        right = mid - 1;\n      } else {\n        // Continue searching in the upper half\n        left = mid + 1;\n      }\n    }\n\n    throw new Error(\"Could not find free unique name for entity! This should never happen.\");\n  }\n\n  // tracks how deeply nested we are in the tree.\n  // since updates are recursive games should not let this get too high\n  #hierarchyGeneration: number = 0;\n\n  /**\n   * Utility for looking up child entities\n   */\n  _: { readonly [id: string]: Entity } = new Proxy(Object.freeze({}), {\n    get: (_target, prop) => {\n      // @ts-expect-error Defer anything outside our typings (e.g. Symbol.toStringTag)\n      if (typeof prop !== \"string\") return _target[prop];\n\n      const entity = this.#children.get(prop);\n      if (!entity) throw new Error(`${serializeIdentifier(this.id, prop)} does not exist!`);\n      return entity;\n    },\n    set: (_target, _prop) => {\n      throw new Error(\"EntityGet is not mutable!\");\n    },\n  });\n\n  /**\n   * Utility for safely hardcasting an entity to a type\n   */\n  cast<T extends Entity>(type: EntityConstructor<T, true>) {\n    if (this instanceof type) return this;\n    throw new Error(`Failed to cast ${this} to '${type.name}'`);\n  }\n\n  #recomputeId() {\n    const oldId = this.id;\n\n    // @ts-expect-error assign to readonly id\n    this.id = serializeIdentifier(this.#parent?.id, this.#name);\n    for (const child of this.children.values()) child.#recomputeId();\n\n    this.game.entities[internal.entityStoreRegister](this, oldId);\n\n    this.#hierarchyGeneration = this.parent ? this.parent.#hierarchyGeneration + 1 : 0;\n\n    if (this.#hierarchyGeneration > 255)\n      console.warn(`${this.id} is very deeply nested!! You may run into issues.`);\n  }\n\n  // deno-lint-ignore no-explicit-any\n  [internal.entitySpawn]<T extends Entity, C extends any[], B extends any[]>(\n    def: EntityDefinition<T, C, B>,\n    opts: { inert?: boolean } = {},\n  ) {\n    const entity = new def.type({\n      game: this.game,\n      name: def.name,\n      parent: this,\n      transform: def.transform,\n      authority: def.authority,\n      ref: def._ref,\n      values: def.values ? Object.fromEntries(Object.entries(def.values)) : undefined,\n    });\n\n    if (def.behaviors) {\n      def.behaviors.forEach(b => {\n        const behavior = new b.type({\n          game: this.game,\n          entity,\n          ref: b._ref,\n          values: b.values,\n        });\n        entity.behaviors.push(behavior);\n      });\n    }\n\n    def.children?.forEach(c => {\n      try {\n        entity[internal.entitySpawn](c, opts);\n      } catch (err) {\n        console.error(err);\n      }\n    });\n\n    if (!opts.inert) entity.#spawn();\n\n    return entity;\n  }\n\n  /**\n   * Spawns an Entity as a child of `this`. The entity definition can contain extra behaviors and\n   * children to attach to the spawned entity. Parents are initialized before children.\n   */\n  // deno-lint-ignore no-explicit-any\n  spawn<T extends Entity, C extends any[], B extends any[]>(def: EntityDefinition<T, C, B>): T {\n    return this[internal.entitySpawn](def);\n  }\n\n  [internal.entitySpawnFinalize]() {\n    for (const child of this.children.values()) child[internal.entitySpawnFinalize]();\n    this.#spawn();\n  }\n  // #endregion\n\n  // #region Behaviors\n  readonly behaviors: Behavior[] = [];\n\n  addBehavior<B extends Behavior>(behavior: BehaviorDefinition<B>): B {\n    const b = new behavior.type({\n      game: this.game,\n      entity: this,\n      ref: behavior._ref,\n      // @ts-expect-error: generic constraints\n      values: behavior.values,\n    });\n    this.behaviors.push(b);\n\n    const behaviorType = behavior.constructor as BehaviorConstructor<B>;\n    this.game[internal.behaviorLoader].initialize(behaviorType);\n    b.spawn();\n\n    return b;\n  }\n\n  getBehavior<B extends Behavior>(constructor: BehaviorConstructor<B>): B {\n    const behavior = this.behaviors.find(b => b instanceof constructor);\n    if (!behavior) {\n      throw new Error(`No behaviors with type: ${constructor.name}`);\n    }\n\n    return behavior as B;\n  }\n\n  getBehaviors<B extends Behavior>(constructor: BehaviorConstructor<B>): B[] {\n    return this.behaviors.filter((b): b is B => b instanceof constructor);\n  }\n  // #endregion\n\n  // #region Cloning\n  #generatePlainDefinition(withRefs: boolean): EntityDefinition<this> & { typeName: string } {\n    const entityValues: Partial<Omit<this, keyof Entity>> = {};\n    for (const [key, value] of this.values.entries()) {\n      const newValue = value.adapter\n        ? value.adapter.convertFromPrimitive(value.adapter.convertToPrimitive(value.value))\n        : structuredClone(value.value);\n      // @ts-expect-error can't prove that key is keyof this because the value map is keyed by string\n      entityValues[key] = newValue;\n    }\n\n    return {\n      _ref: withRefs ? this.ref : undefined,\n      name: this.name,\n      type: this.constructor as EntityConstructor<this>,\n      typeName: Entity.getTypeName(this.constructor as EntityConstructor),\n      authority: this.authority,\n      transform: {\n        position: this.transform.position.bare(),\n        rotation: this.transform.rotation,\n        scale: this.transform.scale.bare(),\n        z: this.transform.z,\n      },\n      values: entityValues,\n    };\n  }\n\n  #generateBehaviorDefinition(\n    behavior: Behavior,\n    withRefs: boolean,\n  ): BehaviorDefinition & { uri: string } {\n    const behaviorValues: Partial<Record<string, unknown>> = {};\n    for (const [key, value] of behavior.values.entries()) {\n      const newValue = value.adapter\n        ? value.adapter.convertFromPrimitive(value.adapter.convertToPrimitive(value.value))\n        : structuredClone(value.value);\n      behaviorValues[key] = newValue;\n    }\n\n    const uri = this.game[internal.behaviorLoader].lookup(\n      behavior.constructor as BehaviorConstructor,\n    );\n    if (!uri) throw new Error(\"Attempted to serialize behavior with no associated uri\");\n\n    return {\n      _ref: withRefs ? behavior.ref : undefined,\n      type: behavior.constructor as BehaviorConstructor,\n      values: behaviorValues,\n      uri,\n    };\n  }\n\n  #generateRichDefinition(withRefs: boolean): EntityDefinition<this> {\n    const definition = this.#generatePlainDefinition(withRefs);\n    definition.behaviors =\n      this.behaviors.length === 0\n        ? undefined\n        : this.behaviors.map(b => this.#generateBehaviorDefinition(b, withRefs));\n    definition.children =\n      this.children.size === 0\n        ? undefined\n        : [...this.children.values()].map(entity => entity.#generateRichDefinition(withRefs));\n\n    return definition;\n  }\n\n  getDefinition(): EntityDefinition<this> {\n    return this.#generateRichDefinition(true);\n  }\n\n  cloneInto(other: Entity, overrides: Partial<EntityDefinition<this>> = {}): this {\n    return other.spawn({ ...this.#generateRichDefinition(false), ...overrides });\n  }\n  // #endregion\n\n  // #region Transform\n  readonly transform: Transform;\n  readonly globalTransform: Transform;\n  get pos() {\n    return this.globalTransform.position;\n  }\n  set pos(value) {\n    this.globalTransform.position = value;\n  }\n  get z() {\n    return this.globalTransform.z;\n  }\n  set z(value) {\n    this.globalTransform.z = value;\n  }\n\n  #prevPosition: IVector2;\n  #prevRotation: number;\n  #prevScale: IVector2;\n  #interpolated: Transform;\n\n  get interpolated(): {\n    // TODO: Readonly Vectors\n    readonly position: Vector2;\n    readonly rotation: number;\n    readonly scale: Vector2;\n  } {\n    return this.#interpolated;\n  }\n\n  setTransform(opts: TransformOptions): void {\n    if (opts.position?.x) {\n      this.transform.position.x = opts.position.x;\n      this.#prevPosition.x = opts.position.x;\n    }\n    if (opts.position?.y) {\n      this.transform.position.y = opts.position.y;\n      this.#prevPosition.y = opts.position.y;\n    }\n\n    if (opts.rotation) {\n      this.transform.rotation = opts.rotation;\n      this.#prevRotation = opts.rotation;\n    }\n\n    if (opts.scale?.x) {\n      this.transform.scale.x = opts.scale.x;\n      this.#prevScale.x = opts.scale.x;\n    }\n    if (opts.scale?.y) {\n      this.transform.scale.y = opts.scale.y;\n      this.#prevScale.y = opts.scale.y;\n    }\n\n    if (opts.z) this.transform.z = opts.z;\n  }\n\n  setGlobalTransform(opts: TransformOptions): void {\n    if (opts.position?.x) {\n      this.globalTransform.position.x = opts.position.x;\n      this.#prevPosition.x = opts.position.x;\n    }\n    if (opts.position?.y) {\n      this.globalTransform.position.y = opts.position.y;\n      this.#prevPosition.y = opts.position.y;\n    }\n\n    if (opts.rotation) {\n      this.globalTransform.rotation = opts.rotation;\n      this.#prevRotation = opts.rotation;\n    }\n\n    if (opts.scale?.x) {\n      this.globalTransform.scale.x = opts.scale.x;\n      this.#prevScale.x = opts.scale.x;\n    }\n    if (opts.scale?.y) {\n      this.globalTransform.scale.y = opts.scale.y;\n      this.#prevScale.y = opts.scale.y;\n    }\n\n    if (opts.z) this.globalTransform.z = opts.z;\n  }\n  // #endregion\n\n  // #region Values\n  #defaultValues: Record<string, unknown> = {};\n  #values = new Map<string, Value>();\n  get values(): ReadonlyMap<string, Value> {\n    return this.#values;\n  }\n\n  protected defineValues<E extends Entity, Props extends EntityValueProp<E>[]>(\n    eType: EntityConstructor<E>,\n    ...props: {\n      [I in keyof Props]: Props[I] extends EntityValueProp<E> ? Props[I] : never;\n    }\n  ) {\n    for (const prop of props) {\n      this.defineValue(eType, prop);\n    }\n  }\n\n  protected defineValue<E extends Entity>(\n    eType: EntityConstructor<E>,\n    prop: EntityValueProp<E>,\n    opts: EntityValueOpts<E, typeof prop> = {},\n  ): Value<E[typeof prop]> {\n    if (!(this instanceof eType))\n      throw new TypeError(`${this.constructor} is not an instance of ${eType}`);\n\n    const identifier = `${this.ref}/${prop}`;\n    if (this.#values.has(identifier))\n      throw new Error(`A value with the identifier '${identifier}' already exists!`);\n\n    type T = Value<E[typeof prop]>[\"value\"];\n    let defaultValue: T = this[prop] as T;\n    if (this.#defaultValues[prop]) defaultValue = this.#defaultValues[prop] as T;\n\n    const value = new Value(\n      this.game.values,\n      identifier,\n      defaultValue,\n      opts.type ?? (inferValueTypeTag(defaultValue) as ValueTypeTag<E[typeof prop]>),\n      opts.description ?? prop, // TODO: autogenerate description (fix casing & spacing)\n    );\n    if (opts.replicated) value.replicated = opts.replicated;\n\n    Object.defineProperty(this, prop, {\n      configurable: true,\n      enumerable: true,\n      set: v => {\n        value.value = v;\n      },\n      get: () => value.value,\n    });\n\n    this.#values.set(prop, value as Value<unknown>);\n\n    return value;\n  }\n  // #endregion\n\n  // #region Authority\n  #exclusiveAuthority: ConnectionId | undefined;\n  #exclusiveAuthorityClock: number = 0;\n  [internal.entityForceAuthorityValues](authority: ConnectionId | undefined, clock: number) {\n    if (clock < this.#exclusiveAuthorityClock) return;\n    if (\n      clock === this.#exclusiveAuthorityClock &&\n      this.#exclusiveAuthority !== undefined &&\n      (authority ?? \"\") < this.#exclusiveAuthority\n    )\n      return;\n\n    this.#exclusiveAuthority = authority;\n    this.#exclusiveAuthorityClock = clock;\n  }\n  get [internal.entityAuthorityClock]() {\n    return this.#exclusiveAuthorityClock;\n  }\n  get authority() {\n    return this.#exclusiveAuthority;\n  }\n  set authority(newAuthority: ConnectionId | undefined) {\n    // picked up by host application event handlers -> forceAuthorityValues\n    this.game.fire(\n      EntityExclusiveAuthorityChanged,\n      this,\n      newAuthority,\n      this.#exclusiveAuthorityClock + 1,\n    );\n  }\n  takeAuthority() {\n    this.authority = this.game.network.self ?? \"server\";\n  }\n  // #endregion\n\n  // internal id for stable internal reference. we only really need this for networking\n  readonly ref: string = generateCUID(\"ent\");\n\n  pausable: boolean = true;\n\n  #updateTransform(fromGlobal: boolean) {\n    if (!this.transform || !this.globalTransform) return;\n\n    if (fromGlobal) {\n      const parentTransform = this.parent?.globalTransform;\n      const localSpaceTransform = parentTransform\n        ? transformWorldToLocal(parentTransform, this.globalTransform)\n        : this.globalTransform;\n      this.transform[internal.transformForceUpdate](localSpaceTransform);\n    } else {\n      const parentTransform = this.parent?.globalTransform;\n      const worldSpaceTransform = parentTransform\n        ? transformLocalToWorld(parentTransform, this.transform)\n        : this.transform;\n      this.globalTransform[internal.transformForceUpdate](worldSpaceTransform);\n    }\n\n    this.fire(EntityTransformUpdate);\n\n    for (const child of this.children.values()) {\n      child.#updateTransform(false);\n    }\n  }\n\n  constructor(ctx: EntityContext) {\n    Entity.#ensureEntityTypeIsRegistered(new.target);\n\n    if (ctx.ref) this.ref = ctx.ref;\n\n    this.game = ctx.game;\n    // @ts-expect-error: must inherit\n    this.root = ctx.parent?.root;\n\n    this.#name = ctx.name;\n    this.id = serializeIdentifier(ctx.parent?.id, this.#name);\n    this.parent = ctx.parent;\n    this.transform = new Transform(ctx.transform);\n    this.globalTransform = new Transform();\n    this.#exclusiveAuthority = ctx.authority;\n\n    if (ctx.values) this.#defaultValues = ctx.values;\n\n    this.transform[internal.transformOnChanged] = () => {\n      this.#updateTransform(false);\n    };\n    this.globalTransform[internal.transformOnChanged] = () => {\n      this.#updateTransform(true);\n    };\n\n    {\n      // set globalTransform to correct values immediately\n      const parentTransform = this.parent?.globalTransform;\n      const worldSpaceTransform = parentTransform\n        ? transformLocalToWorld(parentTransform, this.transform)\n        : this.transform;\n      this.globalTransform[internal.transformForceUpdate](worldSpaceTransform);\n    }\n\n    this.#prevPosition = this.globalTransform.position.bare();\n    this.#prevRotation = this.globalTransform.rotation;\n    this.#prevScale = this.globalTransform.scale.bare();\n    this.#interpolated = new Transform(this.globalTransform);\n\n    this.game.entities[internal.entityStoreRegister](this);\n  }\n\n  // #region Signals\n  #signalListenerMap = new Map<SignalConstructor, SignalListener[]>();\n\n  fire<\n    S extends Signal,\n    C extends SignalConstructorMatching<S, this & Entity>,\n    A extends ConstructorParameters<C>,\n  >(ctor: C, ...args: A) {\n    const listeners = this.#signalListenerMap.get(ctor);\n    if (!listeners) return;\n\n    const signal = new ctor(...args);\n    listeners.forEach(l => l(signal));\n  }\n\n  on<S extends Signal>(\n    type: SignalConstructorMatching<S, this & Entity>,\n    listener: SignalListener<S>,\n  ) {\n    const listeners = this.#signalListenerMap.get(type) ?? [];\n    listeners.push(listener as SignalListener);\n    this.#signalListenerMap.set(type, listeners);\n  }\n\n  unregister<T extends Signal>(type: SignalConstructor<T>, listener: SignalListener<T>) {\n    const listeners = this.#signalListenerMap.get(type);\n    if (!listeners) return;\n    const idx = listeners.indexOf(listener as SignalListener);\n    if (idx !== -1) listeners.splice(idx, 1);\n  }\n  // #endregion\n\n  // #region Listeners\n  readonly #listeners: [\n    receiver: WeakRef<ISignalHandler>,\n    type: SignalConstructor,\n    listener: SignalListener,\n  ][] = [];\n\n  protected listen<S extends Signal, T extends ISignalHandler>(\n    receiver: T,\n    signalType: SignalConstructor<SignalMatching<S, T>>,\n    signalListener: SignalListener<SignalMatching<S, T>>,\n  ) {\n    const boundSignalListener = signalListener.bind(this);\n\n    // redirect to this.on(..) if listening to self\n    if ((receiver as unknown) === this) {\n      // @ts-expect-error can't expect TypeScript to know that T is Entity\n      return this.on(signalType, signalListener);\n    }\n\n    receiver.on(signalType, boundSignalListener);\n    this.#listeners.push([\n      new WeakRef(receiver as ISignalHandler),\n      signalType as SignalConstructor,\n      boundSignalListener as SignalListener,\n    ]);\n  }\n  // #endregion\n\n  // #region Lifecycle\n  #spawned = false;\n  #spawn() {\n    this.#spawned = true;\n\n    this.onInitialize();\n\n    this.fire(EntitySpawned);\n    this.parent?.fire(EntityChildSpawned, this);\n\n    let ancestor = this.parent;\n    while (ancestor) {\n      ancestor.fire(EntityDescendantSpawned, this);\n      ancestor = ancestor.parent;\n    }\n\n    for (const behavior of this.behaviors) {\n      const behaviorType = behavior.constructor as BehaviorConstructor;\n      this.game[internal.behaviorLoader].initialize(behaviorType);\n      behavior.spawn();\n    }\n  }\n\n  onInitialize(): void {}\n\n  #origPosition: Vector2 = new Vector2(NaN, NaN);\n  #origScale: Vector2 = new Vector2(NaN, NaN);\n  #origRotation: number = NaN;\n  #origZ: number = NaN;\n\n  [internal.preTickEntities]() {\n    if (this.pausable && this.game.paused) return;\n\n    if (!this.#spawned) this.#spawn();\n\n    this.#prevPosition = this.globalTransform.position.bare();\n    this.#prevRotation = this.globalTransform.rotation;\n    this.#prevScale = this.globalTransform.scale.bare();\n\n    this.fire(EntityPreUpdate);\n\n    const tr = this.globalTransform;\n    this.#origPosition.x = tr.position.x;\n    this.#origPosition.y = tr.position.y;\n    this.#origScale.x = tr.scale.x;\n    this.#origScale.y = tr.scale.y;\n    this.#origRotation = tr.rotation;\n    this.#origZ = tr.z;\n\n    for (const child of this.#children.values()) {\n      try {\n        child[internal.preTickEntities]();\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }\n\n  [internal.tickEntities]() {\n    if (this.pausable && this.game.paused) return;\n\n    this.fire(EntityUpdate);\n\n    const tr = this.globalTransform;\n\n    if (!this.#origPosition.eq(tr.position))\n      this.fire(EntityMove, this.#origPosition, tr.position);\n    if (!this.#origScale.eq(tr.scale)) this.fire(EntityResize, this.#origScale, tr.scale);\n    if (this.#origRotation !== tr.rotation)\n      this.fire(EntityRotate, this.#origRotation, tr.rotation);\n    if (this.#origZ !== tr.z) this.fire(EntityZChanged, this.#origZ, tr.z);\n\n    for (const child of this.#children.values()) {\n      try {\n        child[internal.tickEntities]();\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }\n\n  [internal.updateInterpolation]() {\n    const partial = this.time.partial;\n\n    this.#interpolated.position.assign(\n      Vector2.lerp(this.#prevPosition, this.globalTransform.position, partial),\n    );\n\n    this.#interpolated.rotation = lerpAngle(\n      this.#prevRotation,\n      this.globalTransform.rotation,\n      partial,\n    );\n\n    this.#interpolated.scale.assign(\n      Vector2.lerp(this.#prevScale, this.globalTransform.scale, partial),\n    );\n\n    for (const child of this.#children.values()) {\n      try {\n        child[internal.updateInterpolation]();\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }\n\n  destroy() {\n    this.fire(EntityDestroyed);\n    if (this.parent) {\n      this.parent.fire(EntityChildDestroyed, this);\n      this.parent.#children.delete(this.name);\n\n      let ancestor: Entity | undefined = this.parent;\n      while (ancestor) {\n        ancestor.fire(EntityDescendantDestroyed, this);\n        ancestor = ancestor.parent;\n      }\n    }\n\n    for (const child of this.#children.values()) {\n      child.destroy();\n    }\n\n    for (const behavior of [...this.behaviors]) {\n      behavior.destroy();\n    }\n\n    for (const [receiverRef, type, listener] of this.#listeners) {\n      const receiver = receiverRef.deref();\n      if (!receiver) continue;\n      receiver.unregister(type, listener);\n    }\n\n    for (const value of this.#values.values()) value.destroy();\n    this.#parent = undefined;\n    this.game.entities[internal.entityStoreUnregister](this);\n\n    this.#signalListenerMap.clear();\n  }\n  // #endregion\n\n  set(values: Partial<Omit<this, keyof Entity>>) {\n    for (const [name, _val] of Object.entries(values)) {\n      if (!(name in this)) {\n        throw new Error(\"property name passed to Entity.set(..) does not exist!\");\n      }\n\n      const value = this.values.get(name);\n      if (!value) {\n        throw new Error(\"property name passed to Entity.set(..) is not a SyncedValue!\");\n      }\n\n      value.value = _val;\n    }\n  }\n\n  [Symbol.for(\"Deno.customInspect\")]() {\n    return this.toString();\n  }\n\n  toString() {\n    return `${this.id} (${this.constructor.name})`;\n  }\n\n  // #region Registry\n  static #entityTypeRegistry = new Map<EntityConstructor<unknown & Entity>, string>();\n  static registerType<T extends Entity>(type: EntityConstructor<T>, namespace: string) {\n    this.#entityTypeRegistry.set(type, namespace);\n  }\n  static #ensureEntityTypeIsRegistered = (newTarget: unknown) => {\n    const target = newTarget as new (...args: unknown[]) => Entity;\n\n    if (\n      !Entity.#entityTypeRegistry.has(target) &&\n      !Reflect.get(target, internal.internalEntity)\n    ) {\n      throw new Error(`Entity type registry is missing ${target.name}!`);\n    }\n  };\n  static getTypeName(type: EntityConstructor): string {\n    const namespace = this.#entityTypeRegistry.get(type);\n    if (!namespace) throw new Error(`Entity type registry is missing ${type.name}!`);\n    return `${namespace}/${type.name}`;\n  }\n  static getEntityType(typeName: string): EntityConstructor {\n    for (const [type, namespace] of this.#entityTypeRegistry.entries())\n      if (typeName === `${namespace}/${type.name}`) return type;\n\n    throw new Error(`Entity type ${typeName} is not registered!`);\n  }\n  // #endregion\n\n  abstract get bounds(): Readonly<IVector2> | undefined;\n}\n\nconst ID_REGEX = /^\\p{ID_Start}\\p{ID_Continue}*$/v;\nexport const isValidPlainIdentifier = (s: string) => ID_REGEX.test(s);\n// prettier-ignore\nexport const serializeIdentifier = (parent: string | undefined, child: string) =>\n  isValidPlainIdentifier(child)\n    ? parent ? `${parent}._.${child}` : `${child}`\n    : parent ? `${parent}._[${JSON.stringify(child)}]` : `[${JSON.stringify(child)}]`;\n", "export const internalEntity = Symbol.for(\"dreamlab.internal.internalEntity\");\nexport const preTickEntities = Symbol.for(\"dreamlab.internal.preTickEntities\");\nexport const tickEntities = Symbol.for(\"dreamlab.internal.tickEntities\");\nexport const updateInterpolation = Symbol.for(\"dreamlab.internal.updateInterpolation\");\nexport const setValueRegistrySource = Symbol.for(\"dreamlab.internal.setValueRegistrySource\");\nexport const behaviorLoader = Symbol.for(\"dreamlab.internal.behaviorLoader\");\nexport const vectorOnChanged = Symbol.for(\"dreamlab.internal.vectorOnChanged\");\nexport const transformOnChanged = Symbol.for(\"dreamlab.internal.transformOnChanged\");\nexport const transformForceUpdate = Symbol.for(\"dreamlab.internal.transformForceUpdate\");\nexport const timeTick = Symbol.for(\"dreamlab.internal.timeTick\");\nexport const timeIncrement = Symbol.for(\"dreamlab.internal.timeIncrement\");\nexport const timeSetMode = Symbol.for(\"dreamlab.internal.timeSetMode\");\nexport const inputsRegisterHandlers = Symbol.for(\"dreamlab.internal.inputsRegisterHandlers\");\nexport const actionSetHeld = Symbol.for(\"dreamlab.internal.actionSetHeld\");\nexport const uiInit = Symbol.for(\"dreamlab.internal.uiInit\");\nexport const uiDestroy = Symbol.for(\"dreamlab.internal.uiDestroy\");\nexport const entityForceAuthorityValues = Symbol.for(\n  \"dreamlab.internal.entityForceAuthorityValues\",\n);\nexport const entitySpawn = Symbol.for(\"dreamlab.internal.entitySpawn\");\nexport const entitySpawnFinalize = Symbol.for(\"dreamlab.internal.entitySpawnFinalize\");\nexport const entityAuthorityClock = Symbol.for(\"dreamlab.internal.entityAuthorityClock\");\nexport const entityStoreRegister = Symbol.for(\"dreamlab.internal.entityStoreRegister\");\nexport const entityStoreUnregister = Symbol.for(\"dreamlab.internal.entityStoreUnregister\");\nexport const entityStoreRegisterRoot = Symbol.for(\"dreamlab.internal.entityStoreRegisterRoot\");\n", "export const EPSILON = 0.00001;\n\nfunction clamp01(value: number): number {\n  if (value < 0) return 0;\n  if (value > 1) return 1;\n  return value;\n}\n\n/**\n * Interpolates between `a` and `b` by `t`\n *\n * `t` is clamped between 0 and 1.\n */\nexport function lerp(a: number, b: number, t: number): number {\n  return a + (b - a) * clamp01(t);\n}\n\n/**\n * Interpolates between `a` and `b` by `t` without clamping `t`\n */\nexport function lerpUnclamped(a: number, b: number, t: number): number {\n  return a + (b - a) * t;\n}\n\nconst TAU = Math.PI * 2;\n\n/**\n * Same as {@link lerp} but makes sure the values interpolate correctly when they wrap around 360 degrees\n */\nexport function lerpAngle(a: number, b: number, t: number): number {\n  const difference = (b - a) % TAU;\n  const distance = ((2 * difference) % TAU) - difference;\n  return a + distance * t;\n}\n\nexport function smoothLerp(\n  current: number,\n  target: number,\n  decay: number,\n  deltaTime: number,\n  epsilon = EPSILON,\n): number {\n  if (Math.abs(target - current) < epsilon) {\n    return target;\n  }\n\n  return target + (current - target) * Math.exp(-decay * deltaTime);\n}\n", "import { vectorOnChanged } from \"../../internal.ts\";\nimport { EPSILON, lerp, smoothLerp } from \"../lerp.ts\";\nimport type { Vector } from \"./_vector.ts\";\n\nexport interface IVector2 {\n  x: number;\n  y: number;\n}\n\nexport class Vector2 implements IVector2, Vector<IVector2, Vector2> {\n  [vectorOnChanged]: () => void = () => {};\n\n  // #region Constants\n  /** All zeroes. */\n  public static get ZERO(): Vector2 {\n    return new Vector2(0, 0);\n  }\n  /** All ones. */\n  public static get ONE(): Vector2 {\n    return new Vector2(1, 1);\n  }\n  /** All negative ones. */\n  public static get NEG_ONE(): Vector2 {\n    return new Vector2(-1, -1);\n  }\n  /** A unit vector pointing along the positive X axis. */\n  public static get X(): Vector2 {\n    return new Vector2(1, 0);\n  }\n  /** A unit vector pointing along the positive Y axis. */\n  public static get Y(): Vector2 {\n    return new Vector2(0, 1);\n  }\n  /** A unit vector pointing along the negative X axis. */\n  public static get NEG_X(): Vector2 {\n    return new Vector2(-1, 0);\n  }\n  /** A unit vector pointing along the negative Y axis. */\n  public static get NEG_Y(): Vector2 {\n    return new Vector2(0, -1);\n  }\n  // #endregion\n\n  // #region Fields\n  #x: number;\n  #y: number;\n\n  public get x(): number {\n    return this.#x;\n  }\n\n  public set x(value: number) {\n    if (value === this.#x) return;\n\n    this.#x = value;\n    this[vectorOnChanged]();\n  }\n\n  public get y(): number {\n    return this.#y;\n  }\n\n  public set y(value: number) {\n    if (value === this.#y) return;\n\n    this.#y = value;\n    this[vectorOnChanged]();\n  }\n  // #endregion\n\n  constructor(x: number, y: number);\n  constructor(vector: IVector2);\n  constructor(vectorOrX: number | IVector2, y?: number) {\n    if (typeof vectorOrX === \"object\" && \"x\" in vectorOrX && \"y\" in vectorOrX) {\n      this.#x = vectorOrX.x;\n      this.#y = vectorOrX.y;\n    } else if (typeof vectorOrX === \"number\" && typeof y === \"number\") {\n      this.#x = vectorOrX;\n      this.#y = y;\n    } else {\n      throw new TypeError(\"y was undefined\");\n    }\n  }\n\n  /**\n   * Creates a vector with all elements set to {@link value}.\n   */\n  public static splat(value: number): Vector2 {\n    return new Vector2({ x: value, y: value });\n  }\n\n  public clone(this: Vector2): Vector2 {\n    return new Vector2({ x: this.#x, y: this.#y });\n  }\n\n  public bare(this: Vector2): IVector2 {\n    return { x: this.#x, y: this.#y };\n  }\n\n  public assign(this: Vector2, value: Partial<IVector2>): boolean {\n    // Ensure at least one component has changed\n    const xChanged = value.x !== undefined && value.x !== this.#x;\n    const yChanged = value.y !== undefined && value.y !== this.#y;\n    if (!xChanged && !yChanged) return false;\n\n    if (value.x !== undefined && xChanged) {\n      this.#x = value.x;\n    }\n\n    if (value.y !== undefined && yChanged) {\n      this.#y = value.y;\n    }\n\n    this[vectorOnChanged]();\n    return true;\n  }\n\n  // #region Methods\n  // #region Equals\n  public static eq(a: IVector2, b: IVector2): boolean {\n    return a.x === b.x && a.y === b.y;\n  }\n\n  public eq(other: IVector2): boolean {\n    return Vector2.eq(this, other);\n  }\n  // #endregion\n\n  // #region Absolute\n  public static abs(vector: IVector2): Vector2 {\n    return new Vector2(Math.abs(vector.x), Math.abs(vector.y));\n  }\n\n  /**\n   * Returns a vector containing the absolute value of each element.\n   */\n  public abs(this: Vector2): Vector2 {\n    return Vector2.abs(this);\n  }\n  // #endregion\n\n  // #region Negate\n  public static neg(vector: IVector2): Vector2 {\n    return new Vector2(-vector.x, -vector.y);\n  }\n\n  public neg(this: Vector2): Vector2 {\n    return Vector2.neg(this);\n  }\n  // #endregion\n\n  // #region Inverse\n  public static inverse(vector: IVector2): Vector2 {\n    return new Vector2(1 / vector.x, 1 / vector.y);\n  }\n\n  public inverse(this: Vector2): Vector2 {\n    return Vector2.inverse(this);\n  }\n  // #endregion\n\n  // #region Add\n  public static add(a: IVector2, b: IVector2): Vector2 {\n    return new Vector2(a.x + b.x, a.y + b.y);\n  }\n\n  public add(this: Vector2, other: IVector2): Vector2 {\n    return Vector2.add(this, other);\n  }\n  // #endregion\n\n  // #region Subtract\n  public static sub(a: IVector2, b: IVector2): Vector2 {\n    return new Vector2(a.x - b.x, a.y - b.y);\n  }\n\n  public sub(this: Vector2, other: IVector2): Vector2 {\n    return Vector2.sub(this, other);\n  }\n  // #endregion\n\n  // #region Multiply\n  public static mul(a: IVector2, b: IVector2 | number): Vector2 {\n    if (typeof b === \"number\") {\n      return new Vector2(a.x * b, a.y * b);\n    }\n\n    return new Vector2(a.x * b.x, a.y * b.y);\n  }\n\n  public mul(this: Vector2, other: IVector2 | number): Vector2 {\n    return Vector2.mul(this, other);\n  }\n  // #endregion\n\n  // #region Divide\n  public static div(a: IVector2, b: IVector2 | number): Vector2 {\n    if (typeof b === \"number\") {\n      return new Vector2(a.x / b, a.y / b);\n    }\n\n    return new Vector2(a.x / b.x, a.y / b.y);\n  }\n\n  public div(this: Vector2, other: IVector2 | number): Vector2 {\n    return Vector2.div(this, other);\n  }\n  // #endregion\n\n  // #region Magnitude\n  /**\n   * Returns the magnitude (length) of a vector.\n   */\n  public static magnitude(vector: IVector2): number {\n    return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n  }\n\n  /**\n   * Returns the magnitude (length) of this vector.\n   */\n  public magnitude(this: Vector2): number {\n    return Vector2.magnitude(this);\n  }\n  // #endregion\n\n  // #region Magnitude Squared\n  /**\n   * Returns the squared magnitude (length) of a vector.\n   */\n  public static magnitudeSquared(vector: IVector2): number {\n    return vector.x * vector.x + vector.y * vector.y;\n  }\n\n  /**\n   * Returns the squared magnitude (length) of this vector.\n   */\n  public magnitudeSquared(this: Vector2): number {\n    return Vector2.magnitudeSquared(this);\n  }\n  // #endregion\n\n  // #region Normalize\n  /**\n   * Returns a new vector with the magnitude (length) normalized to 1.\n   */\n  public static normalize(vector: IVector2): Vector2 {\n    const magnitude = Vector2.magnitude(vector);\n    if (magnitude === 0) return new Vector2(Vector2.ZERO);\n\n    return new Vector2(vector.x / magnitude, vector.y / magnitude);\n  }\n\n  /**\n   * Returns a new vector with the magnitude (length) normalized to 1.\n   */\n  public normalize(this: Vector2): Vector2 {\n    return Vector2.normalize(this);\n  }\n  // #endregion\n\n  // #region Look At\n  /**\n   * Returns the rotation required to look at the target vector.\n   */\n  public static lookAt(vector: IVector2, target: IVector2): number {\n    const { x, y } = Vector2.sub(target, vector);\n    return -Math.atan2(x, y);\n  }\n\n  /**\n   * Returns the rotation required to look at the target vector.\n   */\n  public lookAt(this: Vector2, target: IVector2): number {\n    return Vector2.lookAt(this, target);\n  }\n  // #endregion\n\n  // #region Lerp\n  public static lerp(a: IVector2, b: IVector2, t: number): Vector2 {\n    return new Vector2(lerp(a.x, b.x, t), lerp(a.y, b.y, t));\n  }\n\n  public static smoothLerp(\n    current: IVector2,\n    target: IVector2,\n    decay: number,\n    deltaTime: number,\n    epsilon = EPSILON,\n  ): Vector2 {\n    return new Vector2(\n      smoothLerp(current.x, target.x, decay, deltaTime, epsilon),\n      smoothLerp(current.y, target.y, decay, deltaTime, epsilon),\n    );\n  }\n  // #endregion\n\n  // #region DistanceTo\n  public distanceTo(this: Vector2, other: Vector2): number {\n    const dx = this.x - other.x;\n    const dy = this.y - other.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n  // #endregion\n  // #endregion\n\n  /**\n   * @ignore\n   */\n  public toString(): string {\n    return `Vec2 { x: ${this.#x}, y: ${this.#y} }`;\n  }\n\n  /**\n   * @ignore\n   */\n  public toJSON(): IVector2 {\n    return this.bare();\n  }\n\n  /**\n   * @ignore\n   */\n  public [Symbol.for(\"Deno.customInspect\")](\n    inspect: typeof Deno.inspect,\n    options: Deno.InspectOptions,\n  ): string {\n    return `${this.constructor.name} ${inspect(this.bare(), options)}`;\n  }\n}\n", "import { IVector2, Vector2 } from \"./vector/vector2.ts\";\nimport { transformOnChanged, transformForceUpdate, vectorOnChanged } from \"../internal.ts\";\n\nexport type TransformOptions = {\n  position?: Partial<IVector2>;\n  scale?: Partial<IVector2>;\n  rotation?: number;\n  z?: number;\n};\n\nexport class Transform {\n  #position = new Vector2(0, 0);\n  get position(): Vector2 {\n    return this.#position;\n  }\n  set position(value: IVector2) {\n    this.#position = new Vector2(value);\n    this.#assignSignalListeners();\n    this[transformOnChanged]();\n  }\n\n  #scale = new Vector2(1, 1);\n  get scale(): Vector2 {\n    return this.#scale;\n  }\n  set scale(value: IVector2) {\n    this.#scale = new Vector2(value);\n    this.#assignSignalListeners();\n    this[transformOnChanged]();\n  }\n\n  #rotation: number = 0;\n  get rotation(): number {\n    return this.#rotation;\n  }\n  set rotation(value: number) {\n    this.#rotation = value;\n    this[transformOnChanged]();\n  }\n\n  #z: number = 0;\n  get z(): number {\n    return this.#z;\n  }\n  set z(value: number) {\n    this.#z = value;\n    this[transformOnChanged]();\n  }\n\n  #assignSignalListeners() {\n    this.#position[vectorOnChanged] = () => {\n      this[transformOnChanged]();\n    };\n\n    this.#scale[vectorOnChanged] = () => {\n      this[transformOnChanged]();\n    };\n  }\n\n  constructor(opts?: TransformOptions) {\n    if (opts?.position) {\n      const x = opts.position.x ?? 0;\n      const y = opts.position.y ?? 0;\n\n      this.#position = new Vector2(x, y);\n    }\n\n    if (opts?.scale) {\n      const x = opts.scale.x ?? 1;\n      const y = opts.scale.y ?? 1;\n\n      this.#scale = new Vector2(x, y);\n    }\n\n    if (opts?.rotation) this.#rotation = opts.rotation;\n    if (opts?.z) this.#z = opts.z;\n\n    this.#assignSignalListeners();\n  }\n\n  [transformOnChanged]: () => void = () => {};\n  [transformForceUpdate](transform: Transform): void {\n    // update without issuing onChanged()\n    this.#position = new Vector2(transform.position);\n    this.#scale = new Vector2(transform.scale);\n    this.#rotation = transform.rotation;\n    this.#z = transform.z;\n\n    this.#assignSignalListeners();\n  }\n\n  toJSON() {\n    return {\n      position: this.#position.bare(),\n      rotation: this.#rotation,\n      scale: this.#scale.bare(),\n      z: this.#z,\n    };\n  }\n}\n", "import { Transform } from \"./entity-transform.ts\";\nimport { IVector2, Vector2 } from \"./vector/mod.ts\";\n\n// prettier-ignore\nexport interface Matrix2x2 {\n  xx: number; xy: number;\n  yx: number; yy: number;\n}\n\n// prettier-ignore\nconst mult2x2 = (a: Matrix2x2, b: Matrix2x2): Matrix2x2 => ({\n  xx: a.xx * b.xx + a.xy * b.yx, xy: a.xx * b.xy + a.xy * b.yy,\n  yx: a.yx * b.xx + a.yy * b.yx, yy: a.yx * b.xy + a.yy * b.yy,\n});\n\nconst mult2x2Point = (m: Matrix2x2, p: IVector2): Vector2 =>\n  new Vector2(p.x * m.xx + p.y * m.xy, p.x * m.yx + p.y * m.yy);\n\nexport function transformWorldToLocal(\n  parentWorldTransform: Transform,\n  worldTransform: Transform,\n): Transform {\n  const a = parentWorldTransform;\n  const b = worldTransform;\n\n  // prettier-ignore\n  const inverseScale = {\n    xx: 1 / a.scale.x,  xy: 0.0,\n    yx: 0.0,            yy: 1 / a.scale.y,\n  }\n\n  const th = a.rotation;\n  const cth = Math.cos(-th);\n  const sth = Math.sin(-th);\n  // prettier-ignore\n  const inverseRotation = {\n    xx: cth, xy: -sth,\n    yx: sth, yy: cth,\n  }\n\n  const inverseM = mult2x2(inverseScale, inverseRotation);\n\n  return new Transform({\n    position: mult2x2Point(inverseM, b.position.sub(a.position)),\n    scale: new Vector2(b.scale.x / a.scale.x, b.scale.y / a.scale.y),\n    rotation: b.rotation - a.rotation,\n    z: b.z - a.z,\n  });\n}\n\nexport function transformLocalToWorld(\n  parentWorldTransform: Transform,\n  localTransform: Transform,\n): Transform {\n  const a = parentWorldTransform;\n  const b = localTransform;\n\n  // prettier-ignore\n  const scale = {\n    xx: a.scale.x,  xy: 0.0,\n    yx: 0.0,        yy: a.scale.y,\n  }\n\n  const th = a.rotation;\n  const cth = Math.cos(th);\n  const sth = Math.sin(th);\n  // prettier-ignore\n  const rotation = {\n    xx: cth, xy: -sth,\n    yx: sth, yy: cth,\n  }\n  const m = mult2x2(rotation, scale);\n\n  return new Transform({\n    position: mult2x2Point(m, b.position).add(a.position),\n    scale: new Vector2(a.scale.x * b.scale.x, a.scale.y * b.scale.y),\n    rotation: a.rotation + b.rotation,\n    z: a.z + b.z,\n  });\n}\n\nexport function pointLocalToWorld(worldTransform: Transform, localPoint: IVector2): Vector2 {\n  const t = worldTransform;\n  // prettier-ignore\n  const scale = {\n    xx: t.scale.x, xy: 0.0,\n    yx: 0.0, yy: t.scale.y\n  }\n  const th = t.rotation;\n  const cth = Math.cos(th);\n  const sth = Math.sin(th);\n  // prettier-ignore\n  const rotation = {\n    xx: cth, xy: -sth,\n    yx: sth, yy: cth,\n  }\n  const m = mult2x2(rotation, scale);\n  return mult2x2Point(m, localPoint).add(t.position);\n}\n\nexport function pointWorldToLocal(worldTransform: Transform, worldPoint: IVector2): Vector2 {\n  const t = worldTransform;\n  const inverseScale = {\n    xx: 1 / t.scale.x,\n    xy: 0.0,\n    yx: 0.0,\n    yy: 1 / t.scale.y,\n  };\n  const th = t.rotation;\n  const cth = Math.cos(-th);\n  const sth = Math.sin(-th);\n  // prettier-ignore\n  const inverseRotation = {\n    xx: cth, xy: -sth,\n    yx: sth, yy: cth,\n  }\n  const inverseM = mult2x2(inverseScale, inverseRotation);\n  return mult2x2Point(inverseM, Vector2.sub(worldPoint, t.position));\n}\n", "import { Game } from \"../game.ts\";\nimport { actionSetHeld } from \"../internal.ts\";\nimport {\n  ISignalHandler,\n  Signal,\n  SignalConstructor,\n  SignalConstructorMatching,\n  SignalListener,\n} from \"../signal.ts\";\nimport {\n  ActionBound,\n  ActionChanged,\n  ActionPressed,\n  ActionReleased,\n} from \"../signals/actions.ts\";\nimport { Input } from \"./input.ts\";\n\nexport class Action implements ISignalHandler {\n  #game: Game;\n\n  public readonly name: string;\n  public readonly label: string;\n\n  constructor(name: string, label: string, binding: Input, game: Game) {\n    this.#game = game;\n\n    this.name = name;\n    this.label = label;\n    this.#binding = binding;\n  }\n\n  #heldAt: number | undefined;\n\n  /**\n   * Set to `true` if the action is currently being held down.\n   */\n  public get held(): boolean {\n    return this.#heldAt !== undefined;\n  }\n\n  /**\n   * Set to `true` on the frame that this action was pressed.\n   */\n  public get pressed(): boolean {\n    return this.#heldAt === this.#game.time.ticks - 1;\n  }\n\n  [actionSetHeld](value: boolean, tick: number) {\n    this.#heldAt = value ? tick : undefined;\n\n    if (this.#heldAt !== undefined) this.fire(ActionPressed);\n    else this.fire(ActionReleased);\n\n    this.fire(ActionChanged, value);\n  }\n\n  #binding: Input | undefined;\n  public get binding(): Input | undefined {\n    return this.#binding;\n  }\n\n  public set binding(value: Input | undefined) {\n    if (value === this.#binding) return;\n\n    this.#binding = value;\n    this.fire(ActionBound, this, value);\n  }\n\n  // #region Signals\n  #signalListenerMap = new Map<SignalConstructor, SignalListener[]>();\n\n  fire<\n    S extends Signal,\n    C extends SignalConstructorMatching<S, Action>,\n    A extends ConstructorParameters<C>,\n  >(ctor: C, ...args: A) {\n    const listeners = this.#signalListenerMap.get(ctor);\n    if (!listeners) return;\n\n    const signal = new ctor(...args);\n    listeners.forEach(l => l(signal));\n  }\n\n  on<S extends Signal>(\n    type: SignalConstructorMatching<S, Action>,\n    listener: SignalListener<S>,\n  ) {\n    const listeners = this.#signalListenerMap.get(type) ?? [];\n    listeners.push(listener as SignalListener);\n    this.#signalListenerMap.set(type, listeners);\n  }\n\n  unregister<T extends Signal>(type: SignalConstructor<T>, listener: SignalListener<T>) {\n    const listeners = this.#signalListenerMap.get(type);\n    if (!listeners) return;\n    const idx = listeners.indexOf(listener as SignalListener);\n    if (idx !== -1) listeners.splice(idx, 1);\n  }\n  // #endregion\n}\n", "export type Input = (typeof inputs)[number];\nexport const inputs = [\n  // Letters\n  \"KeyA\",\n  \"KeyB\",\n  \"KeyC\",\n  \"KeyD\",\n  \"KeyE\",\n  \"KeyF\",\n  \"KeyG\",\n  \"KeyH\",\n  \"KeyI\",\n  \"KeyJ\",\n  \"KeyK\",\n  \"KeyL\",\n  \"KeyM\",\n  \"KeyN\",\n  \"KeyO\",\n  \"KeyP\",\n  \"KeyQ\",\n  \"KeyR\",\n  \"KeyS\",\n  \"KeyT\",\n  \"KeyU\",\n  \"KeyV\",\n  \"KeyW\",\n  \"KeyX\",\n  \"KeyY\",\n  \"KeyZ\",\n\n  // Digits\n  \"Digit0\",\n  \"Digit1\",\n  \"Digit2\",\n  \"Digit3\",\n  \"Digit4\",\n  \"Digit5\",\n  \"Digit6\",\n  \"Digit7\",\n  \"Digit8\",\n  \"Digit9\",\n\n  // Special\n  \"ArrowDown\",\n  \"ArrowLeft\",\n  \"ArrowRight\",\n  \"ArrowUp\",\n  \"Enter\",\n  \"Semicolon\",\n  \"ShiftLeft\",\n  \"ShiftRight\",\n  \"ControlLeft\",\n  \"ControlRight\",\n  \"Space\",\n  \"Tab\",\n  \"Backspace\",\n  \"BracketLeft\",\n  \"BracketRight\",\n  \"Backslash\",\n  \"Backquote\",\n  \"Delete\",\n\n  // Mouse\n  \"MouseLeft\",\n  \"MouseRight\",\n  \"MouseMiddle\",\n] as const;\n\nexport function isInput(input: string): input is Input {\n  // @ts-expect-error type narrowing\n  return inputs.includes(input);\n}\n", "import { Camera } from \"../entity/mod.ts\";\nimport type { Game } from \"../game.ts\";\nimport { actionSetHeld, inputsRegisterHandlers } from \"../internal.ts\";\nimport { Vector2 } from \"../math/mod.ts\";\nimport {\n  ISignalHandler,\n  Signal,\n  SignalConstructor,\n  SignalConstructorMatching,\n  SignalListener,\n} from \"../signal.ts\";\nimport {\n  ActionBound,\n  ActionCreated,\n  ActionDeleted,\n  Click,\n  MouseDown,\n  MouseUp,\n  Scroll,\n} from \"../signals/mod.ts\";\nimport { Action } from \"./action.ts\";\nimport type { Input } from \"./input.ts\";\nimport { isInput } from \"./input.ts\";\n\n// TODO: Scroll and cursor position support\n\nexport type Cursor = {\n  // TODO: Readonly Vectors\n  readonly world: Vector2 | undefined;\n  readonly screen: Vector2 | undefined;\n};\n\nexport class Inputs implements ISignalHandler {\n  readonly #game: Game;\n  constructor(game: Game) {\n    this.#game = game;\n  }\n\n  // #region Actions\n  #actions = new Map<string, Action>();\n\n  public get actions(): readonly Action[] {\n    return Object.freeze([...this.#actions.values()]);\n  }\n\n  public get bindings(): readonly (readonly [action: Action, input: Input | undefined])[] {\n    return Object.freeze(\n      [...this.#actions.values()].map(action => [action, action.binding] as const),\n    );\n  }\n\n  public get(action: string): Action | undefined {\n    return this.#actions.get(action);\n  }\n\n  public create(name: string, label: string, defaultBinding: Input): Action {\n    const cached = this.#actions.get(name);\n    if (cached) return cached;\n\n    const action = new Action(name, label, defaultBinding, this.#game);\n    action.on(ActionBound, this.#onBind);\n\n    this.#actions.set(name, action);\n    this.fire(ActionCreated, action);\n\n    return action;\n  }\n\n  public remove(action: string | Action): void {\n    const _action = typeof action === \"string\" ? this.#actions.get(action) : action;\n\n    if (!_action) {\n      throw new Error(`unknown action: ${action}`);\n    }\n\n    _action.unregister(ActionBound, this.#onBind);\n\n    // TODO: Internal remove all listeners\n    // _action.removeAllListeners();\n\n    this.#actions.delete(_action.name);\n    this.fire(ActionDeleted, _action);\n  }\n\n  #clearActions = () => {\n    for (const action of this.actions.values()) {\n      action[actionSetHeld](false, 0);\n    }\n  };\n  // #endregion\n\n  // #region Cursor\n  #screenCursor: Vector2 | undefined = undefined;\n  get cursor(): Cursor {\n    const game = this.#game;\n\n    return {\n      screen: this.#screenCursor,\n      get world() {\n        if (!this.screen) {\n          return undefined;\n        }\n\n        const camera = Camera.getActive(game);\n        if (!camera) {\n          return undefined;\n        }\n        return camera.screenToWorld(this.screen);\n      },\n    };\n  }\n  // #endregion\n\n  // #region Event Handlers\n  // #region Keyboard\n  #onKeyDown = (ev: KeyboardEvent) => this.#onKey(ev, true);\n  #onKeyUp = (ev: KeyboardEvent) => this.#onKey(ev, false);\n\n  #onKey = (ev: KeyboardEvent, pressed: boolean) => {\n    // Ignore repeat events\n    if (ev.repeat) return;\n\n    const input = ev.code;\n    if (!isInput(input)) return;\n\n    const tick = this.#game.time.ticks;\n    for (const action of this.actions.values()) {\n      if (action.binding !== input) continue;\n      action[actionSetHeld](pressed, tick);\n    }\n  };\n  // #endregion\n\n  // #region Mouse\n  #onMouseDown = (ev: MouseEvent) => this.#onMouse(ev, true);\n  #onMouseUp = (ev: MouseEvent) => this.#onMouse(ev, false);\n\n  #onMouse = (ev: MouseEvent, pressed: boolean) => {\n    // @ts-expect-error: we know its a client game\n    if (ev.target !== this.#game.renderer.app.canvas) {\n      return;\n    }\n\n    const input: Input | undefined =\n      ev.button === 0\n        ? \"MouseLeft\"\n        : ev.button === 1\n          ? \"MouseMiddle\"\n          : ev.button === 2\n            ? \"MouseRight\"\n            : undefined;\n\n    if (!input) return;\n    const button =\n      input === \"MouseLeft\" ? \"left\" : input === \"MouseMiddle\" ? \"middle\" : \"right\";\n\n    const cursor = this.cursor;\n    if (pressed) {\n      if (cursor.screen && cursor.world) {\n        this.fire(MouseDown, button, { screen: cursor.screen, world: cursor.world });\n        if (button === \"left\") this.fire(Click, { screen: cursor.screen, world: cursor.world });\n      }\n    } else {\n      this.fire(MouseUp, button, cursor);\n    }\n\n    const tick = this.#game.time.ticks;\n    for (const action of this.actions.values()) {\n      if (action.binding !== input) continue;\n      action[actionSetHeld](pressed, tick);\n    }\n  };\n\n  #onMouseOver = (ev: MouseEvent) => {\n    if (this.#screenCursor === undefined) {\n      this.#screenCursor = new Vector2(ev.offsetX, ev.offsetX);\n    } else {\n      this.#screenCursor.x = ev.offsetX;\n      this.#screenCursor.y = ev.offsetY;\n    }\n  };\n\n  #onMouseOut = (_: MouseEvent) => {\n    this.#screenCursor = undefined;\n  };\n\n  #onMouseMove = (ev: MouseEvent) => {\n    if (this.#screenCursor === undefined) {\n      this.#screenCursor = new Vector2(ev.offsetX, ev.offsetX);\n    } else {\n      this.#screenCursor.x = ev.offsetX;\n      this.#screenCursor.y = ev.offsetY;\n    }\n  };\n\n  #onWheel = (ev: WheelEvent) => {\n    const scale = Camera.METERS_TO_PIXELS;\n    this.fire(Scroll, new Vector2({ x: ev.deltaX / scale, y: ev.deltaY / scale }));\n  };\n  // #endregion\n\n  #onBind = (ev: ActionBound) => {\n    this.fire(ActionBound, ev.action, ev.input);\n  };\n\n  #onVisibilityChange = () => {\n    if (document.visibilityState === \"hidden\") this.#clearActions();\n  };\n\n  #onContextMenu = (ev: MouseEvent) => {\n    ev.preventDefault();\n  };\n\n  [inputsRegisterHandlers](): () => void {\n    if (!this.#game.isClient()) {\n      throw new Error(\"registerHandlers() can only be called on the client\");\n    }\n\n    globalThis.addEventListener(\"keydown\", this.#onKeyDown);\n    globalThis.addEventListener(\"keyup\", this.#onKeyUp);\n    globalThis.addEventListener(\"mousedown\", this.#onMouseDown);\n    globalThis.addEventListener(\"mouseup\", this.#onMouseUp);\n    globalThis.addEventListener(\"wheel\", this.#onWheel);\n    globalThis.addEventListener(\"blur\", this.#clearActions);\n    document.addEventListener(\"visibilitychange\", this.#onVisibilityChange);\n\n    const canvas = this.#game.renderer.app.canvas;\n    canvas.addEventListener(\"contextmenu\", this.#onContextMenu);\n    canvas.addEventListener(\"mouseover\", this.#onMouseOver);\n    canvas.addEventListener(\"mouseout\", this.#onMouseOut);\n    canvas.addEventListener(\"mousemove\", this.#onMouseMove);\n\n    return () => {\n      globalThis.removeEventListener(\"keydown\", this.#onKeyDown);\n      globalThis.removeEventListener(\"keyup\", this.#onKeyUp);\n      globalThis.removeEventListener(\"mousedown\", this.#onMouseDown);\n      globalThis.removeEventListener(\"mouseup\", this.#onMouseUp);\n      globalThis.removeEventListener(\"wheel\", this.#onWheel);\n      globalThis.removeEventListener(\"blur\", this.#clearActions);\n      document.removeEventListener(\"visibilitychange\", this.#onVisibilityChange);\n\n      canvas.removeEventListener(\"contextmenu\", this.#onContextMenu);\n      canvas.removeEventListener(\"mouseover\", this.#onMouseOver);\n      canvas.removeEventListener(\"mouseout\", this.#onMouseOut);\n      canvas.removeEventListener(\"mousemove\", this.#onMouseMove);\n    };\n  }\n  // #endregion\n\n  // #region Signals\n  #signalListenerMap = new Map<SignalConstructor, SignalListener[]>();\n\n  fire<\n    S extends Signal,\n    C extends SignalConstructorMatching<S, Inputs>,\n    A extends ConstructorParameters<C>,\n  >(ctor: C, ...args: A) {\n    const listeners = this.#signalListenerMap.get(ctor);\n    if (!listeners) return;\n\n    const signal = new ctor(...args);\n    listeners.forEach(l => l(signal));\n  }\n\n  on<S extends Signal>(\n    type: SignalConstructorMatching<S, Inputs>,\n    listener: SignalListener<S>,\n  ) {\n    const listeners = this.#signalListenerMap.get(type) ?? [];\n    listeners.push(listener as SignalListener);\n    this.#signalListenerMap.set(type, listeners);\n  }\n\n  unregister<T extends Signal>(type: SignalConstructor<T>, listener: SignalListener<T>) {\n    const listeners = this.#signalListenerMap.get(type);\n    if (!listeners) return;\n    const idx = listeners.indexOf(listener as SignalListener);\n    if (idx !== -1) listeners.splice(idx, 1);\n  }\n  // #endregion\n}\n", "import { Action, Input, Inputs } from \"../input/mod.ts\";\nimport { exclusiveSignalType } from \"../signal.ts\";\n\nexport class ActionCreated {\n  constructor(public readonly action: Action) {}\n  [exclusiveSignalType] = Inputs;\n}\nexport class ActionDeleted {\n  constructor(public readonly action: Action) {}\n  [exclusiveSignalType] = Inputs;\n}\nexport class ActionBound {\n  constructor(public readonly action: Action, public readonly input: Input | undefined) {}\n  [exclusiveSignalType] = Action;\n}\n\nexport class ActionPressed {\n  [exclusiveSignalType] = Action;\n}\nexport class ActionReleased {\n  [exclusiveSignalType] = Action;\n}\nexport class ActionChanged {\n  constructor(public readonly value: boolean) {}\n  [exclusiveSignalType] = Action;\n}\n", "import type { Camera } from \"../entity/mod.ts\";\n\nexport class ActiveCameraChanged {\n  public constructor(\n    public readonly camera: Camera | undefined,\n    public readonly previous: Camera | undefined,\n  ) {}\n}\n", "import { Entity } from \"../entity/mod.ts\";\nimport { exclusiveSignalType } from \"../signal.ts\";\n\nexport class EntityCollision {\n  constructor(\n    public started: boolean,\n    public other: Entity,\n  ) {}\n  [exclusiveSignalType] = Entity;\n}\n", "import { Entity } from \"../entity/mod.ts\";\nimport { exclusiveSignalType } from \"../signal.ts\";\n\n/**\n * Fired when this entity spawns in for the first time -- Only really useful\n * from within onInitialize(..) or an Entity constructor\n */\nexport class EntitySpawned {\n  [exclusiveSignalType] = Entity;\n}\n/**\n * Fired when a child appears beneath this entity.\n * For deep hierarchy additions see {@link EntityDescendantSpawned}\n *\n * @see EntityChildDestroyed\n */\nexport class EntityChildSpawned {\n  constructor(public child: Entity) {}\n  [exclusiveSignalType] = Entity;\n}\n/**\n * Fired when a child or grandchild or nth descendant appears beneath this entity.\n * Covers all cases of {@link EntityChildSpawned} with additions.\n */\nexport class EntityDescendantSpawned {\n  constructor(public descendant: Entity) {}\n  [exclusiveSignalType] = Entity;\n}\n\n/**\n * Fired when this entity is destroyed.\n */\nexport class EntityDestroyed {\n  [exclusiveSignalType] = Entity;\n}\n/**\n * Fired when a child of this entity is destroyed.\n */\nexport class EntityChildDestroyed {\n  constructor(public child: Entity) {}\n  [exclusiveSignalType] = Entity;\n}\n/**\n * Fired when a descendant of this entity is destroyed.\n */\nexport class EntityDescendantDestroyed {\n  constructor(public descendant: Entity) {}\n  [exclusiveSignalType] = Entity;\n}\n\n/**\n * Fired when this entity's {@link Entity#name} changes.\n */\nexport class EntityRenamed {\n  constructor(public oldName: string) {}\n  [exclusiveSignalType] = Entity;\n}\n\nexport class EntityChildRenamed {\n  constructor(public child: Entity, public oldName: string) {}\n  [exclusiveSignalType] = Entity;\n}\n\nexport class EntityDescendantRenamed {\n  constructor(public descendant: Entity, public oldName: string) {}\n  [exclusiveSignalType] = Entity;\n}\n\n/**\n * Fired when this entity's {@link Entity#parent} changes.\n */\nexport class EntityReparented {\n  constructor(public oldParent: Entity) {}\n  [exclusiveSignalType] = Entity;\n}\n\nexport class EntityChildReparented {\n  constructor(public child: Entity, public oldParent: Entity) {}\n  [exclusiveSignalType] = Entity;\n}\n\nexport class EntityDescendantReparented {\n  constructor(public descendant: Entity, public oldParent: Entity) {}\n  [exclusiveSignalType] = Entity;\n}\n", "import { initRapier } from \"@dreamlab/vendor/rapier.ts\";\n\nimport { BehaviorLoader } from \"./behavior/behavior-loader.ts\";\nimport { EntityStore, LocalRoot, PrefabsRoot, ServerRoot, WorldRoot } from \"./entity/mod.ts\";\nimport { Inputs } from \"./input/mod.ts\";\nimport * as internal from \"./internal.ts\";\nimport { ClientNetworking, ServerNetworking } from \"./network.ts\";\nimport { PhysicsEngine } from \"./physics.ts\";\nimport { GameRenderer } from \"./renderer/mod.ts\";\nimport {\n  ISignalHandler,\n  Signal,\n  SignalConstructor,\n  SignalConstructorMatching,\n  SignalListener,\n} from \"./signal.ts\";\nimport {\n  GamePostTick,\n  GamePostRender,\n  GamePreTick,\n  GameRender,\n  GameShutdown,\n  GameTick,\n} from \"./signals/game-events.ts\";\nimport { GameStatusChange } from \"./signals/mod.ts\";\nimport { Time } from \"./time.ts\";\nimport { UIManager } from \"./ui.ts\";\nimport { ValueRegistry } from \"./value/mod.ts\";\nimport { BehaviorConstructor } from \"./behavior/mod.ts\";\n\nexport interface GameOptions {\n  instanceId: string;\n  worldId: string;\n}\n\nexport interface ClientGameOptions extends GameOptions {\n  network: ClientNetworking;\n  container: HTMLDivElement;\n}\nexport interface ServerGameOptions extends GameOptions {\n  network: ServerNetworking;\n}\n\nexport enum GameStatus {\n  Loading,\n  Running,\n  Shutdown,\n}\n\nexport abstract class BaseGame implements ISignalHandler {\n  public abstract isClient(): this is ClientGame;\n  public abstract isServer(): this is ServerGame;\n\n  readonly instanceId: string;\n  readonly worldId: string;\n\n  paused: boolean = false;\n\n  constructor(opts: GameOptions) {\n    if (!(this instanceof ServerGame || this instanceof ClientGame))\n      throw new Error(\"BaseGame is sealed to ServerGame and ClientGame!\");\n\n    this.instanceId = opts.instanceId;\n    this.worldId = opts.worldId;\n\n    // now that we know we are ServerGame | ClientGame, we can safely cast to Game\n  }\n\n  readonly values = new ValueRegistry(this as unknown as Game);\n\n  readonly entities = new EntityStore();\n\n  readonly world = new WorldRoot(this as unknown as Game);\n  readonly prefabs = new PrefabsRoot(this as unknown as Game);\n\n  readonly time = new Time(this as unknown as Game);\n  readonly inputs = new Inputs(this as unknown as Game);\n\n  [internal.behaviorLoader] = new BehaviorLoader(this as unknown as Game);\n  loadBehavior(scriptUri: string): Promise<BehaviorConstructor> {\n    return this[internal.behaviorLoader].loadScript(scriptUri);\n  }\n\n  #initialized: boolean = false;\n\n  #physics: PhysicsEngine | undefined;\n  get physics(): PhysicsEngine {\n    if (this.#physics) return this.#physics;\n    throw new Error(\"physics are not yet initialized!\");\n  }\n\n  #status: GameStatus = GameStatus.Loading;\n  #statusDescription: string | undefined;\n\n  get status(): GameStatus {\n    return this.#status;\n  }\n  get statusDescription(): string | undefined {\n    return this.#statusDescription;\n  }\n\n  setStatus(status: GameStatus, description?: string) {\n    this.#status = status;\n    this.#statusDescription = description;\n    this.fire(GameStatusChange);\n  }\n\n  worldScriptBaseURL: string = \"\";\n  cloudAssetBaseURL: string = \"https://s3-assets.dreamlab.gg/\";\n\n  /** Resolves res:// and cloud:// URIs to https:// URLs */\n  resolveResource(uri: string) {\n    let url = new URL(uri);\n    if (\n      ([\"res:\", \"cloud:\", \"s3:\"].includes(url.protocol) && url.host) ||\n      url.pathname.startsWith(\"//\")\n    ) {\n      url = new URL(url.href.replace(`${url.protocol}//`, `${url.protocol}`));\n    }\n\n    switch (url.protocol) {\n      case \"res:\":\n        return new URL(url.pathname, this.worldScriptBaseURL).toString();\n      case \"cloud:\":\n      case \"s3:\": // s3:// URIs are discouraged; kept for backwards-compat reasons.\n        return new URL(url.pathname, this.cloudAssetBaseURL).toString();\n      default:\n        return uri;\n    }\n  }\n\n  /** Fetches a resource (supports res:// amd cloud:// URIs) */\n  fetch(uri: string, init?: RequestInit): Promise<Response> {\n    return fetch(this.resolveResource(uri), init);\n  }\n\n  // #region Lifecycle\n  async initialize() {\n    if (this.#initialized) return;\n    this.#initialized = true;\n\n    await initRapier();\n\n    this.#physics = new PhysicsEngine(this as unknown as Game);\n  }\n\n  tick() {\n    if (!this.#initialized)\n      throw new Error(\"Illegal state: Game was not initialized before tick loop began!\");\n\n    this.time[internal.timeSetMode](\"tick\");\n    this.time[internal.timeTick]();\n\n    // run the pre tick phase, then a physics update, then the tick phase\n    // so e.g. in Rigidbody2D we can move the body to the entity's transform,\n    // have the physics world update, and then move the transform to the new position of the body.\n\n    this.fire(GamePreTick);\n\n    this[internal.preTickEntities]();\n    if (!this.paused) this.physics.tick();\n    this[internal.tickEntities]();\n\n    this.fire(GameTick);\n    this.fire(GamePostTick);\n  }\n\n  [internal.preTickEntities]() {\n    this.world[internal.preTickEntities]();\n  }\n\n  [internal.tickEntities]() {\n    this.world[internal.tickEntities]();\n  }\n\n  [internal.updateInterpolation]() {\n    this.world[internal.updateInterpolation]();\n  }\n\n  shutdown() {\n    this.setStatus(GameStatus.Shutdown);\n    this.fire(GameShutdown);\n    this.physics.shutdown();\n  }\n\n  [Symbol.dispose]() {\n    this.shutdown();\n  }\n  // #endregion\n\n  // #region SignalHandler impl\n  #signalListenerMap = new Map<SignalConstructor, SignalListener[]>();\n\n  fire<\n    S extends Signal,\n    C extends SignalConstructorMatching<S, BaseGame>,\n    A extends ConstructorParameters<C>,\n  >(ctor: C, ...args: A) {\n    const listeners = this.#signalListenerMap.get(ctor);\n    if (!listeners) return;\n\n    const signal = new ctor(...args);\n    listeners.forEach(l => l(signal));\n  }\n\n  on<S extends Signal>(\n    type: SignalConstructorMatching<S, BaseGame>,\n    listener: SignalListener<S>,\n  ) {\n    const listeners = this.#signalListenerMap.get(type) ?? [];\n    listeners.push(listener as SignalListener);\n    this.#signalListenerMap.set(type, listeners);\n  }\n\n  unregister<T extends Signal>(type: SignalConstructor<T>, listener: SignalListener<T>) {\n    const listeners = this.#signalListenerMap.get(type);\n    if (!listeners) return;\n    const idx = listeners.indexOf(listener as SignalListener);\n    if (idx !== -1) listeners.splice(idx, 1);\n  }\n  // #endregion\n}\n\nexport class ServerGame extends BaseGame {\n  public isClient = (): this is ClientGame => false;\n  public isServer = (): this is ServerGame => true;\n\n  readonly remote: ServerRoot = new ServerRoot(this);\n  readonly local: undefined;\n\n  drawFrame: undefined;\n\n  readonly network: ServerNetworking;\n\n  constructor(opts: ServerGameOptions) {\n    super(opts);\n    this.network = opts.network;\n  }\n\n  [internal.preTickEntities]() {\n    super[internal.preTickEntities]();\n    this.remote[internal.preTickEntities]();\n  }\n\n  [internal.tickEntities]() {\n    super[internal.tickEntities]();\n    this.remote[internal.tickEntities]();\n  }\n\n  [internal.updateInterpolation]() {\n    // No-op\n  }\n}\n\nexport class ClientGame extends BaseGame {\n  public isClient = (): this is ClientGame => true;\n  public isServer = (): this is ServerGame => false;\n\n  readonly container: HTMLDivElement;\n  readonly renderer: GameRenderer;\n\n  readonly ui: UIManager = new UIManager(this);\n\n  readonly network: ClientNetworking;\n\n  constructor(opts: ClientGameOptions) {\n    super(opts);\n\n    this.container = opts.container;\n    this.renderer = new GameRenderer(this);\n\n    this.network = opts.network;\n    this.values[internal.setValueRegistrySource](this.network.self); // FIXME(Charlotte): remove (ValueRegistry has Game so we can just do game.network.self)\n  }\n\n  async initialize() {\n    await super.initialize();\n    await this.renderer.initialize();\n    this.inputs[internal.inputsRegisterHandlers]();\n    this.ui[internal.uiInit]();\n  }\n\n  override shutdown() {\n    this.ui[internal.uiDestroy]();\n    super.shutdown();\n  }\n\n  readonly local: LocalRoot = new LocalRoot(this);\n  readonly remote: undefined;\n\n  #tickAccumulator = 0;\n  tickClient(delta: number): void {\n    this.#tickAccumulator += delta;\n\n    while (this.#tickAccumulator >= this.physics.tickDelta) {\n      if (this.#tickAccumulator > 5_000) {\n        this.#tickAccumulator = 0;\n        console.warn(\"Skipped a bunch of ticks (tick accumulator ran over 5 seconds!)\");\n        break;\n      }\n\n      this.#tickAccumulator -= this.physics.tickDelta;\n      this.tick();\n    }\n\n    this.time[internal.timeSetMode](\"render\");\n    this.time[internal.timeIncrement](delta, this.#tickAccumulator / this.physics.tickDelta);\n    this[internal.updateInterpolation]();\n\n    this.fire(GameRender);\n    this.renderer.renderFrame();\n    this.fire(GamePostRender);\n  }\n\n  [internal.preTickEntities]() {\n    super[internal.preTickEntities]();\n    this.local[internal.preTickEntities]();\n  }\n\n  [internal.tickEntities]() {\n    super[internal.tickEntities]();\n    this.local[internal.tickEntities]();\n  }\n\n  [internal.updateInterpolation]() {\n    super[internal.updateInterpolation]();\n    this.local[internal.updateInterpolation]();\n  }\n}\n\nexport type Game = ServerGame | ClientGame;\n", "import { Behavior, BehaviorConstructor } from \"./behavior.ts\";\nimport { Game } from \"../game.ts\";\n\nexport class BehaviorLoader {\n  #game: Game;\n\n  #cache = new Map<string, BehaviorConstructor>();\n  #initializedBehaviors = new Set<BehaviorConstructor>();\n  #resourceLocationLookup = new Map<BehaviorConstructor, string>();\n\n  constructor(game: Game) {\n    this.#game = game;\n  }\n\n  initialize(behaviorType: BehaviorConstructor) {\n    if (this.#initializedBehaviors.has(behaviorType)) return;\n    this.#initializedBehaviors.add(behaviorType);\n    if (behaviorType.onLoaded) behaviorType.onLoaded(this.#game);\n  }\n\n  lookup(type: BehaviorConstructor): string | undefined {\n    return this.#resourceLocationLookup.get(type);\n  }\n\n  registerInternalBehavior(type: BehaviorConstructor, namespace: string) {\n    const uri = `builtin:${namespace}/${type.name}`;\n    this.#resourceLocationLookup.set(type, uri);\n    this.#cache.set(uri, type);\n  }\n\n  registerBehavior(type: BehaviorConstructor, resourceUri: string) {\n    // resourceUri should be a res:// URI\n    this.#resourceLocationLookup.set(type, resourceUri);\n    this.#cache.set(resourceUri, type);\n  }\n\n  renameBehavior(type: BehaviorConstructor, newUri: string) {\n    const oldUri = this.lookup(type);\n    if (oldUri === undefined)\n      throw new Error(\"Could not find old resource location for Behavior type: \" + type.name);\n\n    this.#cache.delete(oldUri);\n    this.#resourceLocationLookup.set(type, newUri);\n    this.#cache.set(newUri, type);\n  }\n\n  async loadScript(script: string): Promise<BehaviorConstructor> {\n    const location = this.#game.resolveResource(script);\n\n    const cachedConstructor = this.#cache.get(location);\n    if (cachedConstructor !== undefined) return cachedConstructor;\n\n    const module = await import(location);\n    if (!(\"default\" in module))\n      throw new Error(`Module '${location}' must have a Behavior as its default export!`);\n\n    const behaviorType = module.default;\n    if (\n      !(\n        behaviorType instanceof Function &&\n        Object.prototype.isPrototypeOf.call(Behavior, behaviorType)\n      )\n    )\n      throw new Error(`Module '${location}' must have a Behavior as its default export!`);\n\n    this.#cache.set(location, behaviorType);\n    this.#resourceLocationLookup.set(behaviorType, script);\n\n    return behaviorType as BehaviorConstructor;\n  }\n}\n", "import RAPIER, { RigidBody } from \"@dreamlab/vendor/rapier.ts\";\nimport { Entity } from \"./entity/mod.ts\";\nimport { Game } from \"./game.ts\";\nimport { EntityCollision } from \"./signals/entity-collision.ts\";\n\nexport class PhysicsEngine {\n  game: Game;\n\n  world: RAPIER.World;\n  #events: RAPIER.EventQueue;\n  readonly tickDelta: number;\n\n  // TODO: figure out how to network sync this\n  enabled: boolean = true;\n\n  constructor(game: Game) {\n    this.game = game;\n\n    this.tickDelta = 1000.0 / game.time.TPS;\n    this.world = new RAPIER.World({ x: 0, y: -9.81 });\n    this.world.integrationParameters.dt = 1.0 / game.time.TPS;\n    this.#events = new RAPIER.EventQueue(true);\n  }\n\n  registerBody(entity: Entity, body: RigidBody) {\n    const ud = (typeof body.userData === \"object\" ? body.userData : undefined) ?? {};\n    body.userData = { ...ud, entityRef: entity.ref };\n  }\n\n  tick() {\n    if (this.enabled) this.world.step(this.#events);\n    this.#events.drainCollisionEvents((handle1, handle2, started) => {\n      const body1 = this.world.bodies.get(handle1);\n      const body2 = this.world.bodies.get(handle2);\n\n      const udata1 = body1?.userData;\n      const udata2 = body2?.userData;\n\n      let entityRef1: string | undefined;\n      let entityRef2: string | undefined;\n      if (udata1 && typeof udata1 === \"object\" && \"entityRef\" in udata1) {\n        entityRef1 = udata1.entityRef as string;\n      }\n      if (udata2 && typeof udata2 === \"object\" && \"entityRef\" in udata2) {\n        entityRef2 = udata2.entityRef as string;\n      }\n\n      if (!entityRef1 || !entityRef2) return;\n      const entity1 = this.game.entities.lookupByRef(entityRef1);\n      const entity2 = this.game.entities.lookupByRef(entityRef2);\n      if (!entity1 || !entity2) return;\n\n      entity1.fire(EntityCollision, started, entity2);\n      entity2.fire(EntityCollision, started, entity1);\n    });\n  }\n\n  shutdown() {\n    this.world.free();\n    this.#events.free();\n  }\n}\n", "import { ClientGame } from \"../game.ts\";\nimport * as PIXI from \"@dreamlab/vendor/pixi.ts\";\n\nexport class GameRenderer {\n  #game: ClientGame;\n  app: PIXI.Application;\n  scene: PIXI.Container;\n\n  #initialized: boolean = false;\n\n  constructor(game: ClientGame) {\n    this.#game = game;\n\n    this.app = new PIXI.Application();\n    this.scene = new PIXI.Container();\n    this.app.stage.addChild(this.scene);\n  }\n\n  async initialize() {\n    if (this.#initialized) return;\n    this.#initialized = true;\n\n    await this.app.init({\n      autoDensity: true,\n      resizeTo: this.#game.container,\n      antialias: true,\n      autoStart: false,\n      sharedTicker: false,\n    });\n\n    this.#game.container.append(this.app.canvas);\n  }\n\n  renderFrame() {\n    this.app.ticker.update(this.#game.time.now);\n    this.app.render();\n  }\n}\n", "import type { Game } from \"./game.ts\";\nimport * as internal from \"./internal.ts\";\n\nexport class Time {\n  #game: Game;\n\n  readonly TPS: number = 60;\n\n  constructor(game: Game) {\n    this.#game = game;\n  }\n\n  #accessMode: \"tick\" | \"render\" = \"tick\";\n  [internal.timeSetMode](mode: \"tick\" | \"render\") {\n    this.#accessMode = mode;\n  }\n\n  #ticks = 0;\n  [internal.timeTick]() {\n    this.#ticks += 1;\n  }\n  get ticks(): number {\n    return this.#ticks;\n  }\n\n  #now = 0;\n  #delta = 0;\n  #partial = 0;\n  [internal.timeIncrement](delta: number, partial: number) {\n    this.#now += delta;\n    this.#delta = delta;\n\n    if (!this.#game.paused) this.#partial = partial;\n  }\n\n  public get now(): number {\n    if (this.#accessMode === \"tick\") return this.#ticks * this.#game.physics.tickDelta;\n    return this.#now;\n  }\n\n  public get delta(): number {\n    if (this.#accessMode === \"tick\") return this.#game.physics.tickDelta;\n    return this.#delta;\n  }\n\n  public get partial(): number {\n    if (this.#accessMode === \"tick\") return 0;\n    return this.#partial;\n  }\n\n  public toJSON() {\n    return { now: this.now, delta: this.delta, partial: this.partial };\n  }\n}\n", "import { Entity } from \"./entity/mod.ts\";\nimport { ClientGame } from \"./game.ts\";\nimport { uiDestroy, uiInit } from \"./internal.ts\";\nimport { EntityReparented } from \"./signals/mod.ts\";\n\nexport class UIManager {\n  #game: ClientGame;\n\n  #container: HTMLDivElement | undefined;\n\n  constructor(game: ClientGame) {\n    this.#game = game;\n  }\n\n  [uiInit]() {\n    if (this.#container) return;\n\n    // Make sure parent div is relative\n    this.#game.container.style.position = \"relative\";\n\n    this.#container = document.createElement(\"div\");\n    this.#container.style.pointerEvents = \"none\";\n    this.#container.style.position = \"absolute\";\n    this.#container.style.inset = \"0\";\n    this.#container.style.overflow = \"hidden\";\n\n    this.#game.container.appendChild(this.#container);\n  }\n\n  [uiDestroy]() {\n    this.#container?.remove();\n    this.#container = undefined;\n  }\n\n  create(entity: Entity): readonly [container: HTMLDivElement, root: ShadowRoot] {\n    if (!this.#container) {\n      throw new Error(\"game not initialized\");\n    }\n\n    const div = document.createElement(\"div\");\n    div.style.position = \"absolute\";\n    div.style.inset = \"0\";\n\n    const root = div.attachShadow({ mode: \"open\" });\n    this.#container.appendChild(div);\n\n    div.id = entity.id;\n    entity.on(EntityReparented, () => (div.id = entity.id));\n\n    return [div, root];\n  }\n}\n\ntype ElementProps<E extends Element> = {\n  // afaik you cant detect \"extends readonly\" in TS so whatever\n  // deno-lint-ignore ban-types\n  [K in keyof E]?: E[K] extends Function ? never : E[K];\n};\n\nexport function element<K extends keyof HTMLElementTagNameMap>(\n  tag: K,\n  {\n    id,\n    props = {},\n    style = {},\n    classList = [],\n    children = [],\n  }: {\n    id?: string;\n    props?: ElementProps<HTMLElementTagNameMap[K]>;\n    style?: Partial<CSSStyleDeclaration>;\n    classList?: readonly string[];\n    children?: (Element | string | Text)[];\n  } = {},\n): HTMLElementTagNameMap[K] {\n  const element = document.createElement(tag);\n  if (id) element.id = id;\n\n  for (const cl of classList) element.classList.add(cl);\n  Object.assign(element.style, style);\n  Object.assign(element, props);\n\n  const nodes = children.map(e => (typeof e === \"string\" ? document.createTextNode(e) : e));\n  element.append(...nodes);\n\n  return element;\n}\n", "import { Game } from \"../game.ts\";\n\nexport type Primitive = string | number | boolean | undefined;\n\nexport type JsonArray = readonly JsonValue[];\nexport type JsonObject = { [Key in string]?: JsonValue };\nexport type JsonValue = Primitive | JsonArray | JsonObject;\n\nexport abstract class ValueTypeAdapter<T> {\n  constructor(protected game: Game) {}\n\n  abstract convertToPrimitive(value: T): JsonValue;\n  abstract convertFromPrimitive(value: JsonValue): T;\n}\n\nexport type AdapterTypeTag<T> = new (game: Game) => ValueTypeAdapter<T>;\n", "import * as internal from \"../internal.ts\";\nimport { Game } from \"../game.ts\";\n\nimport { BasicSignalHandler, exclusiveSignalType } from \"../signal.ts\";\nimport { Value } from \"./value.ts\";\nimport { ConnectionId } from \"../network.ts\";\n\nexport class ValueChanged {\n  constructor(\n    public value: Value,\n    public newValue: unknown,\n    public clock: number,\n    public from: ConnectionId,\n  ) {}\n\n  [exclusiveSignalType] = ValueRegistry;\n}\n\nexport class ValueRegistry extends BasicSignalHandler<ValueRegistry> {\n  #values = new Map<string, Value>();\n\n  #source: ConnectionId = \"server\";\n  get source() {\n    return this.#source;\n  }\n  [internal.setValueRegistrySource](value: ConnectionId) {\n    this.#source = value;\n  }\n\n  readonly game: Game;\n\n  constructor(game: Game) {\n    super();\n    this.game = game;\n  }\n\n  get values(): readonly Value[] {\n    return [...this.#values.values()];\n  }\n\n  lookup(identifier: string): Value | undefined {\n    return this.#values.get(identifier);\n  }\n\n  register(value: Value) {\n    if (this.#values.has(value.identifier))\n      throw new Error(`Value with identifier '${value.identifier}' already exists!`);\n\n    this.#values.set(value.identifier, value);\n  }\n\n  remove(value: Value) {\n    this.#values.delete(value.identifier);\n  }\n}\n", "import { SignalListener } from \"../signal.ts\";\nimport { AdapterTypeTag, ValueTypeAdapter } from \"./data.ts\";\nimport { ValueRegistry, ValueChanged } from \"./registry.ts\";\nimport { ConnectionId } from \"../network.ts\";\nimport type { ReadonlyDeep } from \"@dreamlab/vendor/type-fest.ts\";\n\n// prettier-ignore\ntype BasicTypeTag<T> =\n    T extends number ? typeof Number\n  : T extends string ? typeof String\n  : T extends boolean ? typeof Boolean\n  : never;\n\nexport type ValueTypeTag<T> = AdapterTypeTag<T> | BasicTypeTag<T>;\nexport function inferValueTypeTag<T>(value: T): ValueTypeTag<T> {\n  switch (typeof value) {\n    case \"number\":\n      return Number as ValueTypeTag<T>;\n    case \"string\":\n      return String as ValueTypeTag<T>;\n    case \"boolean\":\n      return Boolean as ValueTypeTag<T>;\n  }\n\n  throw new Error(`Failed to infer type tag for value: ${value}`);\n}\n\ntype ReadonlyIfObject<T> = T extends object ? ReadonlyDeep<T> : T;\n\nexport class Value<T = unknown> {\n  #registry: ValueRegistry;\n\n  identifier: string;\n  #value: ReadonlyIfObject<T>;\n  typeTag: ValueTypeTag<T>;\n\n  adapter: ValueTypeAdapter<T> | undefined;\n\n  /** for conflict resolution: incrementing number (greater number wins) */\n  clock: number;\n  /** for conflict resolution: the last setting client's connection ID, or \"server\" if set by the server. */\n  #lastSource: ConnectionId = \"server\";\n\n  get value() {\n    return this.#value;\n  }\n  set value(newValue) {\n    // this will fire `this.#changeListener` and update the internal value that way\n    this.#registry.fire(\n      ValueChanged,\n      this as Value<unknown>,\n      newValue,\n      this.clock + 1,\n      this.#registry.source,\n    );\n  }\n\n  description: string;\n  replicated: boolean = true;\n\n  constructor(\n    registry: ValueRegistry,\n    identifier: string,\n    defaultValue: Value<T>[\"value\"],\n    typeTag: ValueTypeTag<T>,\n    description: string,\n  ) {\n    this.#registry = registry;\n    this.identifier = identifier;\n    this.#value = defaultValue;\n    this.typeTag = typeTag;\n    this.clock = 0;\n    this.#lastSource = registry.source;\n\n    this.description = description;\n\n    if (this.typeTag !== Number && this.typeTag !== String && this.typeTag !== Boolean) {\n      const adapterTypeTag = this.typeTag as AdapterTypeTag<T>;\n      this.adapter = new adapterTypeTag(registry.game);\n      if (!(this.adapter instanceof ValueTypeAdapter))\n        throw new Error(\"AdapterTypeTag was not the correct type!\");\n    }\n\n    this.#registry.on(ValueChanged, this.#changeListener);\n    this.#registry.register(this as Value<unknown>);\n  }\n\n  destroy() {\n    this.#registry.unregister(ValueChanged, this.#changeListener);\n    this.#registry.remove(this as Value<unknown>);\n  }\n\n  [Symbol.dispose]() {\n    this.destroy();\n  }\n\n  #changeListener: SignalListener<ValueChanged> = signal => {\n    if (signal.value === this)\n      this.#applyUpdate(signal.newValue as Value<T>[\"value\"], signal.clock, signal.from);\n  };\n\n  #applyUpdate(\n    incomingValue: Value<T>[\"value\"],\n    incomingClock: number,\n    incomingSource: ConnectionId,\n  ) {\n    if (incomingClock < this.clock) return;\n    if (incomingClock === this.clock) {\n      if (incomingSource !== \"server\") {\n        if (this.#lastSource === \"server\") return;\n        if (incomingSource < this.#lastSource) return;\n      }\n    }\n\n    this.#value = incomingValue;\n    this.#lastSource = incomingSource;\n    this.clock = incomingClock;\n  }\n}\n", "import { Entity } from \"../../entity/mod.ts\";\nimport { JsonValue, ValueTypeAdapter } from \"../data.ts\";\n\n/**\n * This supports a `Value<Entity | undefined>`\n */\nexport class EntityByRefAdapter extends ValueTypeAdapter<Entity | undefined> {\n  convertToPrimitive(value: Entity | undefined): JsonValue {\n    return value?.ref;\n  }\n  convertFromPrimitive(value: JsonValue): Entity | undefined {\n    if (value === undefined) return undefined;\n    if (typeof value !== \"string\")\n      throw new TypeError(\"An EntityByRef value should be a string!\");\n    const ref: string = value;\n    return this.game.entities.lookupByRef(ref);\n  }\n}\n", "import { JsonValue, ValueTypeAdapter } from \"../data.ts\";\n\nexport function enumAdapter<const T extends readonly string[]>(values: T) {\n  function isValid(v: unknown): v is T[number] {\n    if (typeof v !== \"string\") return false;\n    return values.includes(v);\n  }\n\n  return class EnumAdapter extends ValueTypeAdapter<T[number]> {\n    convertToPrimitive(value: T[number]): JsonValue {\n      if (!isValid(value)) {\n        throw new TypeError(\"invalid enum member\");\n      }\n\n      return value;\n    }\n\n    convertFromPrimitive(value: JsonValue): T[number] {\n      if (!isValid(value)) {\n        throw new TypeError(\"invalid enum member\");\n      }\n\n      return value;\n    }\n  };\n}\n", "import { JsonValue, ValueTypeAdapter } from \"../data.ts\";\n\n/**\n * `Value<TextureAdapter>` is the same as `Value<string>`,\n * except we know to preload the resource when it's in a scene definition.\n */\nexport class TextureAdapter extends ValueTypeAdapter<string> {\n  convertToPrimitive(value: string): JsonValue {\n    return value;\n  }\n  convertFromPrimitive(value: JsonValue): string {\n    if (typeof value !== \"string\") throw new TypeError(\"A Texture value should be a string!\");\n    return value;\n  }\n}\n\n/**\n * `Value<SpritesheetAdapter>` is the same as `Value<string>`,\n * except we know to preload the resource when it's in a scene definition.\n */\nexport class SpritesheetAdapter extends ValueTypeAdapter<string> {\n  convertToPrimitive(value: string): JsonValue {\n    return value;\n  }\n  convertFromPrimitive(value: JsonValue): string {\n    if (typeof value !== \"string\")\n      throw new TypeError(\"A Spritesheet value should be a string!\");\n    return value;\n  }\n}\n", "import { Vector2 } from \"../../math/mod.ts\";\nimport { JsonValue, ValueTypeAdapter } from \"../data.ts\";\n\n/**\n * This supports a `Value<Vector2>`\n */\nexport class Vector2Adapter extends ValueTypeAdapter<Vector2> {\n  convertToPrimitive(value: Vector2): JsonValue {\n    return { x: value.x, y: value.y };\n  }\n  convertFromPrimitive(value: JsonValue): Vector2 {\n    if (typeof value !== \"object\" || Array.isArray(value)) {\n      throw new TypeError(\"A Vector2 value should be an object\");\n    }\n\n    if (\n      !(\"x\" in value && \"y\" in value) ||\n      typeof value.x !== \"number\" ||\n      typeof value.y !== \"number\"\n    ) {\n      throw new TypeError(\"Invalid Vector2 value\");\n    }\n\n    return new Vector2({ x: value.x, y: value.y });\n  }\n}\n", "import { BaseGame } from \"../game.ts\";\nimport { exclusiveSignalType } from \"../signal.ts\";\n\nexport class GamePreTick {\n  [exclusiveSignalType] = BaseGame;\n}\nexport class GameTick {\n  [exclusiveSignalType] = BaseGame;\n}\nexport class GamePostTick {\n  [exclusiveSignalType] = BaseGame;\n}\n\nexport class GamePreRender {\n  [exclusiveSignalType] = BaseGame;\n}\nexport class GameRender {\n  [exclusiveSignalType] = BaseGame;\n}\nexport class GamePostRender {\n  [exclusiveSignalType] = BaseGame;\n}\n\nexport class GameShutdown {\n  [exclusiveSignalType] = BaseGame;\n}\nexport class GameStatusChange {\n  [exclusiveSignalType] = BaseGame;\n}\n", "import { SetNonNullable, Simplify } from \"@dreamlab/vendor/type-fest.ts\";\nimport { Cursor } from \"../input/inputs.ts\";\nimport { Vector2 } from \"../math/mod.ts\";\n\nexport class Click {\n  public constructor(public readonly cursor: Simplify<SetNonNullable<Cursor>>) {}\n}\n\nexport class MouseDown {\n  public constructor(\n    public readonly button: \"left\" | \"right\" | \"middle\",\n    public readonly cursor: Simplify<SetNonNullable<Cursor>>,\n  ) {}\n}\n\nexport class MouseUp {\n  public constructor(\n    public readonly button: \"left\" | \"right\" | \"middle\",\n    public readonly cursor: Cursor,\n  ) {}\n}\n\nexport class MouseOver {\n  public constructor(public readonly cursor: Simplify<SetNonNullable<Cursor>>) {}\n}\n\nexport class MouseOut {\n  public constructor(public readonly cursor: Cursor) {}\n}\n\nexport class Scroll {\n  public constructor(public readonly delta: Vector2) {}\n}\n", "import { ConnectionInfo } from \"../network.ts\";\n\nexport class PlayerJoined {\n  constructor(public connection: ConnectionInfo) {}\n}\nexport class PlayerLeft {\n  constructor(public connection: ConnectionInfo) {}\n}\n", "import {\n  entityStoreRegister,\n  entityStoreRegisterRoot,\n  entityStoreUnregister,\n} from \"../internal.ts\";\nimport { IVector2, pointWorldToLocal } from \"../math/mod.ts\";\nimport { Entity, EntityConstructor } from \"./entity.ts\";\n\nexport class EntityStore {\n  #entitiesById = new Map<string, Entity>();\n  #entitiesByRef = new Map<string, Entity>();\n  #entitiesByType = new Map<EntityConstructor, Set<Entity>>();\n\n  get all(): IterableIterator<Entity> {\n    return this.#entitiesById.values();\n  }\n\n  lookupById(id: string): Entity | undefined {\n    return this.#entitiesById.get(id);\n  }\n\n  lookupByRef(ref: string): Entity | undefined {\n    return this.#entitiesByRef.get(ref);\n  }\n\n  lookupByType<T extends Entity>(type: EntityConstructor<T, true>): readonly T[] {\n    const entities: T[] = [];\n    for (const [ctor, set] of this.#entitiesByType) {\n      // @ts-expect-error: i cant be bothered to typecast this\n      if (!(ctor === type || ctor.prototype instanceof type)) continue;\n      // @ts-expect-error: same as above\n      entities.push(...set.values());\n    }\n\n    return entities;\n  }\n\n  lookupByPosition(position: IVector2): readonly Entity[] {\n    const entities: Entity[] = [];\n    for (const entity of this.#entitiesById.values()) {\n      const bounds = entity.bounds;\n      if (!bounds) continue;\n\n      const local = pointWorldToLocal(entity.globalTransform, position);\n      const inBounds =\n        local.x >= bounds.x / -2 &&\n        local.x <= bounds.x / 2 &&\n        local.y >= bounds.y / -2 &&\n        local.y <= bounds.y / 2;\n\n      if (inBounds) entities.push(entity);\n    }\n    return entities;\n  }\n\n  // #region Internal methods\n  [entityStoreRegister](entity: Entity, oldId?: string) {\n    if (oldId && this.#entitiesById.get(oldId) === entity) this.#entitiesById.delete(oldId);\n\n    const existingEntity = this.#entitiesByRef.get(entity.ref);\n    if (existingEntity && existingEntity !== entity)\n      throw new Error(\"tried to overwrite entity ref: \" + entity.ref);\n\n    this.#entitiesByRef.set(entity.ref, entity);\n    this.#entitiesById.set(entity.id, entity);\n\n    const type = entity.constructor as EntityConstructor;\n    const set = this.#entitiesByType.get(type) ?? new Set();\n    set.add(entity);\n\n    this.#entitiesByType.set(type, set);\n\n    if (entity.root) {\n      this.#roots.get(entity.root.name)?.[entityStoreRegister](entity, oldId);\n    }\n  }\n\n  [entityStoreUnregister](entity: Entity) {\n    this.#entitiesById.delete(entity.id);\n    this.#entitiesByRef.delete(entity.ref);\n\n    const type = entity.constructor as EntityConstructor;\n    const set = this.#entitiesByType.get(type);\n    if (set) set.delete(entity);\n\n    if (entity.root) {\n      this.#roots.get(entity.root.name)?.[entityStoreUnregister](entity);\n    }\n  }\n\n  #roots = new Map<string, EntityStore>();\n  [entityStoreRegisterRoot](root: string, store: EntityStore) {\n    this.#roots.set(root, store);\n  }\n  // #endregion\n}\n", "import type { Game } from \"../game.ts\";\nimport * as internal from \"../internal.ts\";\nimport { EntityStore } from \"./entity-store.ts\";\nimport { Entity } from \"./entity.ts\";\n\nexport abstract class Root extends Entity {\n  static [internal.internalEntity] = true;\n\n  readonly entities: EntityStore;\n  readonly bounds: undefined;\n\n  constructor(game: Game, name: string) {\n    super({ game, name, ref: name.toUpperCase() });\n\n    this.entities = new EntityStore();\n    game.entities[internal.entityStoreRegisterRoot](`game.${name}`, this.entities);\n    game.entities[internal.entityStoreUnregister](this);\n\n    this.name = `game.${name}`;\n    // @ts-expect-error assign readonly id\n    this.id = `game.${name}`;\n    // @ts-expect-error assign readonly id\n    this.root = this;\n\n    this.pausable = false;\n\n    game.entities[internal.entityStoreRegister](this);\n  }\n}\n\nexport class WorldRoot extends Root {\n  constructor(game: Game) {\n    super(game, \"world\");\n  }\n}\n\nexport class ServerRoot extends Root {\n  constructor(game: Game) {\n    super(game, \"server\");\n  }\n}\n\nexport class LocalRoot extends Root {\n  constructor(game: Game) {\n    super(game, \"local\");\n  }\n}\n\nexport class PrefabsRoot extends Root {\n  constructor(game: Game) {\n    super(game, \"prefabs\");\n  }\n}\n", "import * as PIXI from \"@dreamlab/vendor/pixi.ts\";\nimport { EntityDestroyed, GameRender } from \"../signals/mod.ts\";\nimport { Entity, EntityContext } from \"./entity.ts\";\n\nexport abstract class PixiEntity extends Entity {\n  protected container: PIXI.Container | undefined;\n\n  constructor(ctx: EntityContext) {\n    super(ctx);\n\n    this.listen(this.game, GameRender, () => {\n      if (!this.container) return;\n\n      const pos = this.interpolated.position;\n      const rot = this.interpolated.rotation;\n      this.container.position = { x: pos.x, y: -pos.y };\n      this.container.rotation = -rot;\n    });\n\n    this.on(EntityDestroyed, () => {\n      this.container?.destroy({ children: true });\n    });\n  }\n\n  onInitialize() {\n    if (!this.game.isClient()) return;\n\n    this.container = new PIXI.Container();\n    this.game.renderer.scene.addChild(this.container);\n  }\n}\n", "import * as PIXI from \"@dreamlab/vendor/pixi.ts\";\nimport { IVector2, Vector2 } from \"../../math/mod.ts\";\nimport { EntityDestroyed, GameRender } from \"../../signals/mod.ts\";\nimport { SpritesheetAdapter } from \"../../value/adapters/texture-adapter.ts\";\nimport { ValueChanged } from \"../../value/mod.ts\";\nimport { Entity, EntityContext } from \"../entity.ts\";\nimport { PixiEntity } from \"../pixi-entity.ts\";\n\nexport class AnimatedSprite2D extends PixiEntity {\n  static {\n    Entity.registerType(this, \"@core\");\n  }\n\n  public static readonly icon = \"\uD83D\uDDBC\uFE0F\";\n  get bounds(): Readonly<IVector2> | undefined {\n    // TODO: Reuse the same vector\n    return new Vector2(this.width, this.height);\n  }\n\n  width: number = 1;\n  height: number = 1;\n  spritesheet: string = \"\";\n  alpha: number = 1;\n  speed: number = 0.1;\n  loop: boolean = true;\n\n  sprite: PIXI.AnimatedSprite | undefined;\n\n  constructor(ctx: EntityContext) {\n    super(ctx);\n\n    this.defineValues(AnimatedSprite2D, \"width\", \"height\", \"alpha\", \"speed\", \"loop\");\n    this.defineValue(AnimatedSprite2D, \"spritesheet\", { type: SpritesheetAdapter });\n\n    if (this.spritesheet !== \"\") {\n      PIXI.Assets.backgroundLoad(this.game.resolveResource(this.spritesheet));\n    }\n\n    this.listen(this.game, GameRender, () => {\n      if (!this.sprite) return;\n\n      this.sprite.width = this.width * this.globalTransform.scale.x;\n      this.sprite.height = this.height * this.globalTransform.scale.y;\n      this.sprite.alpha = this.alpha;\n    });\n\n    const spritesheetValue = this.values.get(\"spritesheet\");\n    this.listen(this.game.values, ValueChanged, async event => {\n      if (!this.sprite) return;\n      if (event.value !== spritesheetValue) return;\n\n      const textures = await this.#getTextures();\n      this.sprite.textures = textures;\n      this.sprite.play();\n    });\n\n    this.on(EntityDestroyed, () => {\n      this.sprite?.destroy();\n    });\n  }\n\n  async #getTextures(): Promise<PIXI.Texture[]> {\n    if (this.spritesheet === \"\") return [PIXI.Texture.WHITE];\n\n    const spritesheet = await PIXI.Assets.load(this.game.resolveResource(this.spritesheet));\n    if (!(spritesheet instanceof PIXI.Spritesheet)) {\n      throw new TypeError(\"texture is not a pixi sritesheet\");\n    }\n\n    return Object.values(spritesheet.textures);\n  }\n\n  async onInitialize() {\n    super.onInitialize();\n    if (!this.container) return;\n\n    const textures = await this.#getTextures();\n    this.sprite = new PIXI.AnimatedSprite(textures);\n\n    this.sprite.width = this.width * this.globalTransform.scale.x;\n    this.sprite.height = this.height * this.globalTransform.scale.y;\n    this.sprite.anchor.set(0.5);\n    this.sprite.alpha = this.alpha;\n    this.sprite.animationSpeed = this.speed;\n    this.sprite.loop = this.loop;\n    this.sprite.play();\n\n    this.container.addChild(this.sprite);\n  }\n}\n", "import * as PIXI from \"@dreamlab/vendor/pixi.ts\";\nimport { Transform, Vector2 } from \"../../math/mod.ts\";\nimport { pointLocalToWorld, pointWorldToLocal } from \"../../math/spatial-transforms.ts\";\nimport { EntityDestroyed, GameRender, MouseDown } from \"../../signals/mod.ts\";\nimport type { EntityContext } from \"../entity.ts\";\nimport { Entity } from \"../entity.ts\";\nimport { ClickableRect } from \"./clickable.ts\";\n\ntype Handle = Exclude<`${\"t\" | \"b\" | \"\"}${\"l\" | \"\" | \"r\"}`, \"\">;\n\n// TODO: Make work when rotated lol\n// TODO: Add handle to center for dragging\n\nexport class BoxResizeGizmo extends Entity {\n  static {\n    Entity.registerType(this, \"@core\");\n  }\n\n  readonly bounds: undefined;\n\n  static readonly #STROKE_WIDTH = 5 / 100;\n  static readonly #CLICK_WIDTH = BoxResizeGizmo.#STROKE_WIDTH * 2.5;\n  static readonly #CORNER_WIDTH = BoxResizeGizmo.#CLICK_WIDTH * 1.25;\n\n  #gfx: PIXI.Graphics | undefined;\n\n  #target: Entity | undefined;\n  get target(): Entity | undefined {\n    return this.#target;\n  }\n  set target(value: Entity | undefined) {\n    this.#target = value;\n    this.#updateHandles();\n  }\n\n  // #region Handles\n  #updateHandles() {\n    // Destroy existing chilldren\n    this.children.forEach(c => c.destroy());\n\n    // Don't spawn handles if no target entity or no bounds\n    const entity = this.#target;\n    if (!entity) return;\n    const bounds = entity.bounds;\n    if (!bounds) return;\n    const scaled = Vector2.mul(bounds, entity.globalTransform.scale);\n\n    const leftEdge = this.spawn({\n      type: ClickableRect,\n      name: \"LeftEdge\",\n      transform: {\n        z: 999_999,\n        position: { x: -(scaled.x / 2 + BoxResizeGizmo.#CLICK_WIDTH / 2), y: 0 },\n      },\n      values: { width: BoxResizeGizmo.#CLICK_WIDTH, height: scaled.y },\n    });\n\n    const rightEdge = this.spawn({\n      type: ClickableRect,\n      name: \"RightEdge\",\n      transform: {\n        z: 999_999,\n        position: { x: scaled.x / 2 + BoxResizeGizmo.#CLICK_WIDTH / 2, y: 0 },\n      },\n      values: { width: BoxResizeGizmo.#CLICK_WIDTH, height: scaled.y },\n    });\n\n    const topEdge = this.spawn({\n      type: ClickableRect,\n      name: \"TopEdge\",\n      transform: {\n        z: 999_999,\n        position: { x: 0, y: scaled.y / 2 + BoxResizeGizmo.#CLICK_WIDTH / 2 },\n      },\n      values: { width: scaled.x, height: BoxResizeGizmo.#CLICK_WIDTH },\n    });\n\n    const bottomEdge = this.spawn({\n      type: ClickableRect,\n      name: \"BottomEdge\",\n      transform: {\n        z: 999_999,\n        position: { x: 0, y: -(scaled.y / 2 + BoxResizeGizmo.#CLICK_WIDTH / 2) },\n      },\n      values: { width: scaled.x, height: BoxResizeGizmo.#CLICK_WIDTH },\n    });\n\n    const topLeft = this.spawn({\n      type: ClickableRect,\n      name: \"TopLeft\",\n      transform: {\n        z: 1_000_000,\n        position: {\n          x: -(scaled.x / 2 + BoxResizeGizmo.#CORNER_WIDTH / 2),\n          y: scaled.y / 2 + BoxResizeGizmo.#CORNER_WIDTH / 2,\n        },\n      },\n      values: { width: BoxResizeGizmo.#CORNER_WIDTH, height: BoxResizeGizmo.#CORNER_WIDTH },\n    });\n\n    const topRight = this.spawn({\n      type: ClickableRect,\n      name: \"TopRight\",\n      transform: {\n        z: 1_000_000,\n        position: {\n          x: scaled.x / 2 + BoxResizeGizmo.#CORNER_WIDTH / 2,\n          y: scaled.y / 2 + BoxResizeGizmo.#CORNER_WIDTH / 2,\n        },\n      },\n      values: { width: BoxResizeGizmo.#CORNER_WIDTH, height: BoxResizeGizmo.#CORNER_WIDTH },\n    });\n\n    const bottomLeft = this.spawn({\n      type: ClickableRect,\n      name: \"BottomLeft\",\n      transform: {\n        z: 1_000_000,\n        position: {\n          x: -(scaled.x / 2 + BoxResizeGizmo.#CORNER_WIDTH / 2),\n          y: -(scaled.y / 2 + BoxResizeGizmo.#CORNER_WIDTH / 2),\n        },\n      },\n      values: { width: BoxResizeGizmo.#CORNER_WIDTH, height: BoxResizeGizmo.#CORNER_WIDTH },\n    });\n\n    const bottomRight = this.spawn({\n      type: ClickableRect,\n      name: \"BottomRight\",\n      transform: {\n        z: 1_000_000,\n        position: {\n          x: scaled.x / 2 + BoxResizeGizmo.#CORNER_WIDTH / 2,\n          y: -(scaled.y / 2 + BoxResizeGizmo.#CORNER_WIDTH / 2),\n        },\n      },\n      values: { width: BoxResizeGizmo.#CORNER_WIDTH, height: BoxResizeGizmo.#CORNER_WIDTH },\n    });\n\n    const onMouseDown =\n      (handle: Handle) =>\n      ({ button, cursor: { world } }: MouseDown) => {\n        if (button !== \"left\") return;\n\n        const offset = world.sub(this.globalTransform.position);\n        this.#action = {\n          type: \"scale\",\n          handle,\n          offset,\n          transform: new Transform(entity.transform),\n          globalTransform: new Transform(entity.globalTransform),\n        };\n      };\n\n    leftEdge.on(MouseDown, onMouseDown(\"l\"));\n    rightEdge.on(MouseDown, onMouseDown(\"r\"));\n    topEdge.on(MouseDown, onMouseDown(\"t\"));\n    bottomEdge.on(MouseDown, onMouseDown(\"b\"));\n    topLeft.on(MouseDown, onMouseDown(\"tl\"));\n    topRight.on(MouseDown, onMouseDown(\"tr\"));\n    bottomLeft.on(MouseDown, onMouseDown(\"bl\"));\n    bottomRight.on(MouseDown, onMouseDown(\"br\"));\n\n    const translateOnMouseDown =\n      (axis: \"x\" | \"y\" | \"both\") =>\n      ({ button, cursor: { world } }: MouseDown) => {\n        if (button !== \"left\") return;\n\n        const offset = world.sub(this.globalTransform.position);\n        this.#action = { type: \"translate\", axis, offset };\n      };\n\n    const translateBoth = this.spawn({\n      type: ClickableRect,\n      name: \"TranslateBoth\",\n      transform: { position: { x: 0, y: 0 } },\n      values: { width: 0.3, height: 0.3 },\n    });\n    translateBoth.on(MouseDown, translateOnMouseDown(\"both\"));\n  }\n\n  #updateHandlePositions() {\n    // We dont want the handle sizes to change with scale\n\n    const entity = this.#target;\n    if (!entity) return;\n    const bounds = entity.bounds;\n    if (!bounds) return;\n    const scaled = Vector2.mul(bounds, entity.globalTransform.scale);\n\n    const leftEdge = this.children.get(\"LeftEdge\")?.cast(ClickableRect);\n    if (leftEdge) {\n      leftEdge.height = scaled.y;\n      leftEdge.transform.position.x = -(scaled.x / 2 + BoxResizeGizmo.#CLICK_WIDTH / 2);\n    }\n\n    const rightEdge = this.children.get(\"RightEdge\")?.cast(ClickableRect);\n    if (rightEdge) {\n      rightEdge.height = scaled.y;\n      rightEdge.transform.position.x = scaled.x / 2 + BoxResizeGizmo.#CLICK_WIDTH / 2;\n    }\n\n    const topEdge = this.children.get(\"TopEdge\")?.cast(ClickableRect);\n    if (topEdge) {\n      topEdge.width = scaled.x;\n      topEdge.transform.position.y = scaled.y / 2 + BoxResizeGizmo.#CLICK_WIDTH / 2;\n    }\n\n    const bottomEdge = this.children.get(\"BottomEdge\")?.cast(ClickableRect);\n    if (bottomEdge) {\n      bottomEdge.width = scaled.x;\n      bottomEdge.transform.position.y = -(scaled.y / 2 + BoxResizeGizmo.#CLICK_WIDTH / 2);\n    }\n\n    const topLeft = this.children.get(\"TopLeft\")?.cast(ClickableRect);\n    if (topLeft) {\n      topLeft.transform.position.x = -(scaled.x / 2 + BoxResizeGizmo.#CORNER_WIDTH / 2);\n      topLeft.transform.position.y = scaled.y / 2 + BoxResizeGizmo.#CORNER_WIDTH / 2;\n    }\n\n    const topRight = this.children.get(\"TopRight\")?.cast(ClickableRect);\n    if (topRight) {\n      topRight.transform.position.x = scaled.x / 2 + BoxResizeGizmo.#CORNER_WIDTH / 2;\n      topRight.transform.position.y = scaled.y / 2 + BoxResizeGizmo.#CORNER_WIDTH / 2;\n    }\n\n    const bottomLeft = this.children.get(\"BottomLeft\")?.cast(ClickableRect);\n    if (bottomLeft) {\n      bottomLeft.transform.position.x = -(scaled.x / 2 + BoxResizeGizmo.#CORNER_WIDTH / 2);\n      bottomLeft.transform.position.y = -(scaled.y / 2 + BoxResizeGizmo.#CORNER_WIDTH / 2);\n    }\n\n    const bottomRight = this.children.get(\"BottomRight\")?.cast(ClickableRect);\n    if (bottomRight) {\n      bottomRight.transform.position.x = scaled.x / 2 + BoxResizeGizmo.#CORNER_WIDTH / 2;\n      bottomRight.transform.position.y = -(scaled.y / 2 + BoxResizeGizmo.#CORNER_WIDTH / 2);\n    }\n  }\n  // #endregion\n\n  // #region Action / Signals\n  #action:\n    | { type: \"translate\"; axis: \"x\" | \"y\" | \"both\"; offset: Vector2 }\n    | {\n        type: \"scale\";\n        handle: Handle;\n        offset: Vector2;\n        transform: Transform;\n        globalTransform: Transform;\n      }\n    | undefined;\n\n  #onMouseMove = (_: MouseEvent) => {\n    if (!this.#target) return;\n    if (!this.#action) return;\n\n    const cursor = this.inputs.cursor;\n    if (!cursor.world) return;\n\n    const pos = cursor.world.sub(this.#action.offset);\n    if (this.#action.type === \"translate\") {\n      const local = pointWorldToLocal(this.globalTransform, pos);\n      if (this.#action.axis === \"x\") local.y = 0;\n      if (this.#action.axis === \"y\") local.x = 0;\n      const world = pointLocalToWorld(this.globalTransform, local);\n\n      this.#target.globalTransform.position = world;\n\n      return;\n    }\n\n    const local = pointWorldToLocal(this.#action.globalTransform, pos);\n    const scaled = this.#action.transform.scale.mul(local);\n\n    switch (this.#action.handle) {\n      case \"l\": {\n        this.#target.transform.scale.x = this.#action.transform.scale.x - scaled.x;\n        this.#target.transform.position.x = this.#action.transform.position.x + scaled.x / 2;\n\n        break;\n      }\n      case \"r\": {\n        this.#target.transform.scale.x = this.#action.transform.scale.x + scaled.x;\n        this.#target.transform.position.x = this.#action.transform.position.x + scaled.x / 2;\n\n        break;\n      }\n      case \"t\": {\n        this.#target.transform.scale.y = this.#action.transform.scale.y + scaled.y;\n        this.#target.transform.position.y = this.#action.transform.position.y + scaled.y / 2;\n\n        break;\n      }\n      case \"b\": {\n        this.#target.transform.scale.y = this.#action.transform.scale.y - scaled.y;\n        this.#target.transform.position.y = this.#action.transform.position.y + scaled.y / 2;\n\n        break;\n      }\n\n      case \"tl\": {\n        this.#target.transform.scale.x = this.#action.transform.scale.x - scaled.x;\n        this.#target.transform.scale.y = this.#action.transform.scale.y + scaled.y;\n        this.#target.transform.position.x = this.#action.transform.position.x + scaled.x / 2;\n        this.#target.transform.position.y = this.#action.transform.position.y + scaled.y / 2;\n\n        break;\n      }\n      case \"tr\": {\n        const scaled = this.#action.transform.scale.mul(local);\n        this.#target.transform.scale.x = this.#action.transform.scale.x + scaled.x;\n        this.#target.transform.scale.y = this.#action.transform.scale.y + scaled.y;\n        this.#target.transform.position.x = this.#action.transform.position.x + scaled.x / 2;\n        this.#target.transform.position.y = this.#action.transform.position.y + scaled.y / 2;\n\n        break;\n      }\n      case \"bl\": {\n        const scaled = this.#action.transform.scale.mul(local);\n        this.#target.transform.scale.x = this.#action.transform.scale.x - scaled.x;\n        this.#target.transform.scale.y = this.#action.transform.scale.y - scaled.y;\n        this.#target.transform.position.x = this.#action.transform.position.x + scaled.x / 2;\n        this.#target.transform.position.y = this.#action.transform.position.y + scaled.y / 2;\n\n        break;\n      }\n      case \"br\": {\n        const scaled = this.#action.transform.scale.mul(local);\n        this.#target.transform.scale.x = this.#action.transform.scale.x + scaled.x;\n        this.#target.transform.scale.y = this.#action.transform.scale.y - scaled.y;\n        this.#target.transform.position.x = this.#action.transform.position.x + scaled.x / 2;\n        this.#target.transform.position.y = this.#action.transform.position.y + scaled.y / 2;\n\n        break;\n      }\n    }\n  };\n\n  #onMouseUp = (_: MouseEvent) => {\n    if (!this.#action) return;\n    this.#action = undefined;\n  };\n  // #endregion\n\n  constructor(ctx: EntityContext) {\n    super(ctx);\n\n    // Must be a local entity\n    if (ctx.parent !== this.game.local || !this.game.isClient()) {\n      throw new Error(`${this.constructor.name} must be spawned as a local client entity`);\n    }\n\n    this.listen(this.game, GameRender, () => {\n      if (!this.#gfx) return;\n      this.#gfx.clear();\n\n      const entity = this.#target;\n      if (!entity) return;\n\n      const pos = entity.pos;\n      this.pos.assign(entity.pos);\n\n      const bounds = entity.bounds;\n      if (!bounds) return;\n\n      this.#updateHandlePositions();\n\n      const halfx = bounds.x / 2;\n      const halfy = bounds.y / 2;\n\n      const a = pointLocalToWorld(entity.globalTransform, { x: -halfx, y: -halfy });\n      const b = pointLocalToWorld(entity.globalTransform, { x: -halfx, y: halfy });\n      const c = pointLocalToWorld(entity.globalTransform, { x: halfx, y: -halfy });\n      const d = pointLocalToWorld(entity.globalTransform, { x: halfx, y: halfy });\n\n      a.y = -a.y;\n      b.y = -b.y;\n      c.y = -c.y;\n      d.y = -d.y;\n\n      this.#gfx\n        .poly([a, b, d, c])\n        .stroke({\n          width: BoxResizeGizmo.#STROKE_WIDTH,\n          color: \"22a2ff\",\n          alpha: 1,\n          alignment: -0,\n        })\n        .rect(pos.x - 0.15, -(pos.y + 0.15), 0.3, 0.3)\n        .fill({ alpha: 0.2, color: \"blue\" })\n        .stroke({ alpha: 0.5, color: \"blue\", width: 0.01 });\n\n      // TODO: Draw corner boxes\n    });\n\n    this.on(EntityDestroyed, () => {\n      this.#gfx?.destroy();\n\n      if (this.game.isClient()) {\n        const canvas = this.game.renderer.app.canvas;\n        canvas.removeEventListener(\"mousemove\", this.#onMouseMove);\n        canvas.removeEventListener(\"mouseup\", this.#onMouseUp);\n      }\n    });\n  }\n\n  onInitialize(): void {\n    if (!this.game.isClient()) return;\n\n    this.#gfx = new PIXI.Graphics({ zIndex: 9999999999 });\n    this.game.renderer.scene.addChild(this.#gfx);\n\n    this.#updateHandles();\n\n    const canvas = this.game.renderer.app.canvas;\n    canvas.addEventListener(\"mousemove\", this.#onMouseMove);\n    canvas.addEventListener(\"mouseup\", this.#onMouseUp);\n  }\n}\n", "import * as PIXI from \"@dreamlab/vendor/pixi.ts\";\nimport { ClientGame, Game } from \"../../game.ts\";\nimport { smoothLerp } from \"../../math/lerp.ts\";\nimport { IVector2, Vector2 } from \"../../math/mod.ts\";\nimport { ActiveCameraChanged, EntityDestroyed, GameRender } from \"../../signals/mod.ts\";\nimport { Entity, EntityContext } from \"../entity.ts\";\n\nexport class Camera extends Entity {\n  static {\n    Entity.registerType(this, \"@core\");\n  }\n\n  public static readonly icon = \"\uD83C\uDFA5\";\n  public static METERS_TO_PIXELS = 100;\n  public bounds: undefined;\n\n  public readonly container: PIXI.Container;\n  public smooth: number = 0.01;\n\n  #position: Vector2 = new Vector2(this.interpolated.position);\n  #rotation: number = this.interpolated.rotation;\n  #scale: Vector2 = new Vector2(this.interpolated.scale);\n\n  #matrix: PIXI.Matrix = new PIXI.Matrix();\n  #updateMatrix() {\n    const game = this.game as ClientGame;\n\n    return this.#matrix\n      .identity()\n      .translate(-this.#position.x, this.#position.y)\n      .rotate(this.#rotation)\n      .scale(Camera.METERS_TO_PIXELS, Camera.METERS_TO_PIXELS)\n      .scale(1 / this.#scale.x, 1 / this.#scale.y)\n      .translate(game.renderer.app.canvas.width / 2, game.renderer.app.canvas.height / 2);\n  }\n\n  get smoothed(): {\n    readonly position: IVector2;\n    readonly rotation: number;\n    readonly scale: IVector2;\n  } {\n    return {\n      position: this.#position.bare(),\n      rotation: this.#rotation,\n      scale: this.#scale.bare(),\n    };\n  }\n\n  #active = false;\n  get active(): boolean {\n    return this.#active;\n  }\n  set active(value: boolean) {\n    // Early return if we are already active\n    if (value && this.#active) return;\n\n    const previous = Camera.getActive(this.game);\n    if (!value) {\n      if (this.#active === true) {\n        this.game.fire(ActiveCameraChanged, undefined, this);\n      }\n\n      this.#active = false;\n      return;\n    }\n\n    const cameras = this.game.entities.lookupByType(Camera);\n    for (const camera of cameras) camera.active = false;\n    this.#active = true;\n\n    // Instantly set smoothed values\n    this.#position = new Vector2(this.interpolated.position);\n    this.#rotation = this.interpolated.rotation;\n    this.#scale = new Vector2(this.interpolated.scale);\n\n    // Reparent scene container\n    const game = this.game as ClientGame;\n    this.container.addChild(game.renderer.scene);\n\n    // Emit event\n    this.game.fire(ActiveCameraChanged, this, previous);\n  }\n\n  // TODO: Look into improving this API maybe?\n  public static getActive(game: Game): Camera | undefined {\n    return game.entities.lookupByType(Camera).find(camera => camera.active);\n  }\n\n  constructor(ctx: EntityContext) {\n    super(ctx);\n\n    // Must be a local entity\n    if (ctx.parent !== this.game.local || !this.game.isClient()) {\n      throw new Error(`${this.constructor.name} must be spawned as a local client entity`);\n    }\n\n    this.defineValues(Camera, \"smooth\");\n\n    this.container = new PIXI.Container();\n    this.game.renderer.app.stage.addChild(this.container);\n\n    this.listen(this.game, GameRender, () => {\n      if (!this.#active) return;\n      const delta = this.game.time.delta;\n\n      // No smoothing\n      if (this.smooth === 1) {\n        this.#position.x = this.interpolated.position.x;\n        this.#position.y = this.interpolated.position.y;\n        this.#rotation = this.interpolated.rotation;\n        this.#scale.x = this.interpolated.scale.x;\n        this.#scale.y = this.interpolated.scale.y;\n\n        this.container.setFromMatrix(this.#updateMatrix());\n        return;\n      }\n\n      this.#position = Vector2.smoothLerp(\n        this.#position,\n        this.interpolated.position,\n        this.smooth,\n        delta,\n      );\n\n      this.#rotation = smoothLerp(\n        this.#rotation,\n        this.interpolated.rotation,\n        this.smooth,\n        delta,\n      );\n\n      this.#scale = Vector2.smoothLerp(\n        this.#scale,\n        this.interpolated.scale,\n        this.smooth,\n        delta,\n      );\n\n      this.container.setFromMatrix(this.#updateMatrix());\n    });\n\n    this.on(EntityDestroyed, () => {\n      const game = this.game as ClientGame;\n\n      // Deactivate camera\n      this.active = false;\n\n      // Reparent to pixi root\n      game.renderer.app.stage.addChild(game.renderer.scene);\n      // Destroy container after\n      this.container.destroy();\n    });\n\n    this.active = true;\n  }\n\n  public worldToScreen(position: IVector2): Vector2 {\n    const game = this.game as ClientGame;\n\n    const matrix = PIXI.Matrix.shared\n      .translate(-this.globalTransform.position.x, this.globalTransform.position.y)\n      .rotate(this.#rotation)\n      .scale(Camera.METERS_TO_PIXELS, Camera.METERS_TO_PIXELS)\n      .scale(1 / this.#scale.x, 1 / this.#scale.y)\n      .translate(game.renderer.app.canvas.width / 2, game.renderer.app.canvas.height / 2);\n\n    const { x, y } = matrix.apply({ x: position.x, y: -position.y });\n    return new Vector2(x, y);\n  }\n\n  public screenToWorld(position: IVector2): Vector2 {\n    const game = this.game as ClientGame;\n\n    const matrix = PIXI.Matrix.shared\n      .translate(-this.globalTransform.position.x, this.globalTransform.position.y)\n      .rotate(this.#rotation)\n      .scale(Camera.METERS_TO_PIXELS, Camera.METERS_TO_PIXELS)\n      .scale(1 / this.#scale.x, 1 / this.#scale.y)\n      .translate(game.renderer.app.canvas.width / 2, game.renderer.app.canvas.height / 2);\n\n    const { x, y } = matrix.applyInverse(position);\n    return new Vector2(x, -y);\n  }\n}\n", "import { Cursor } from \"../../input/inputs.ts\";\nimport { IVector2, Vector2, pointWorldToLocal } from \"../../math/mod.ts\";\nimport { BaseGame } from \"../../mod.ts\";\nimport {\n  Click,\n  GameRender,\n  MouseDown,\n  MouseOut,\n  MouseOver,\n  MouseUp,\n} from \"../../signals/mod.ts\";\nimport { Entity, EntityContext } from \"../entity.ts\";\nimport { Camera } from \"./camera.ts\";\n\nconst clickedSetter = Symbol.for(\"dreamlab.internal.clickable.clicked-setter\");\nconst hoverSetter = Symbol.for(\"dreamlab.internal.clickable.hover-setter\");\n\nexport abstract class ClickableEntity extends Entity {\n  #clicked: boolean = false;\n  get clicked(): boolean {\n    return this.#clicked;\n  }\n  [clickedSetter](value: boolean, button: \"left\" | \"right\" | \"middle\", cursor: Cursor) {\n    const prev = this.#clicked;\n    this.#clicked = value;\n\n    if (!prev && value) {\n      const x = { screen: cursor.screen!, world: cursor.world! };\n      this.fire(MouseDown, button, x);\n      if (button === \"left\") this.fire(Click, x);\n    } else if (prev && !value) {\n      this.fire(MouseUp, button, cursor);\n    }\n  }\n\n  #hover: boolean = false;\n  get hover(): boolean {\n    return this.#hover;\n  }\n  [hoverSetter](value: boolean, cursor: Cursor) {\n    const prev = this.#hover;\n    this.#hover = value;\n\n    if (!prev && value) {\n      this.fire(MouseOver, { screen: cursor.screen!, world: cursor.world! });\n    } else if (prev && !value) {\n      this.fire(MouseOut, cursor);\n    }\n  }\n\n  static #GameRenderListeners = new Map<BaseGame, (ev: GameRender) => void>();\n  static #MouseDownListeners = new Map<BaseGame, (ev: MouseDown) => void>();\n  static #MouseUpListeners = new Map<BaseGame, (ev: MouseUp) => void>();\n\n  constructor(ctx: EntityContext) {\n    super(ctx);\n\n    if (this.game.isClient()) {\n      if (!ClickableEntity.#GameRenderListeners.has(this.game)) {\n        const canvas =\n          document.getElementById(\"dreamlab-pointer-style-target\") ??\n          this.game.renderer.app.canvas;\n\n        // TODO: Make z sorting optional\n        const fn = (_: GameRender) => {\n          const cursor = this.inputs.cursor;\n          const entities = this.game.entities\n            .lookupByType(ClickableEntity)\n            .toSorted((a, b) => b.z - a.z);\n\n          let hoverCount = 0;\n          for (const entity of entities) {\n            const isInBounds =\n              hoverCount > 0\n                ? false\n                : (cursor.world && entity.isInBounds(cursor.world)) ?? false;\n\n            entity[hoverSetter](isInBounds, cursor);\n            if (isInBounds) hoverCount++;\n          }\n\n          if (hoverCount > 0) canvas.style.cursor = \"pointer\";\n          else canvas.style.cursor = \"\";\n        };\n\n        ClickableEntity.#GameRenderListeners.set(this.game, fn);\n        this.game.on(GameRender, fn);\n      }\n\n      if (!ClickableEntity.#MouseDownListeners.has(this.game)) {\n        const fn = ({ button, cursor }: MouseDown) => {\n          const entities = this.game.entities\n            .lookupByType(ClickableEntity)\n            .toSorted((a, b) => b.z - a.z);\n\n          let clickedCount = 0;\n          for (const entity of entities) {\n            const isInBounds = clickedCount > 0 ? false : entity.isInBounds(cursor.world);\n            if (isInBounds) {\n              entity[clickedSetter](true, button, cursor);\n              clickedCount++;\n            }\n          }\n        };\n\n        ClickableEntity.#MouseDownListeners.set(this.game, fn);\n        this.inputs.on(MouseDown, fn);\n      }\n\n      if (!ClickableEntity.#MouseUpListeners.has(this.game)) {\n        const fn = ({ button, cursor }: MouseUp) => {\n          const entities = this.game.entities.lookupByType(ClickableEntity);\n          for (const entity of entities) entity[clickedSetter](false, button, cursor);\n        };\n\n        ClickableEntity.#MouseUpListeners.set(this.game, fn);\n        this.inputs.on(MouseUp, fn);\n      }\n    }\n\n    this.listen(this.game, GameRender, () => {\n      const camera = Camera.getActive(this.game);\n      if (!camera) return;\n\n      const cursor = this.inputs.cursor;\n      if (!cursor) return;\n    });\n  }\n\n  protected abstract isInBounds(worldPosition: Vector2): boolean;\n}\n\nexport class ClickableRect extends ClickableEntity {\n  static {\n    Entity.registerType(this, \"@core\");\n  }\n\n  public static readonly icon = \"\uD83D\uDC46\";\n  get bounds(): Readonly<IVector2> | undefined {\n    // TODO: Reuse the same vector\n    return new Vector2(this.width, this.height);\n  }\n\n  width: number = 1;\n  height: number = 1;\n\n  constructor(ctx: EntityContext) {\n    super(ctx);\n    this.defineValues(ClickableRect, \"width\", \"height\");\n  }\n\n  public isInBounds(worldPosition: Vector2): boolean {\n    const localPosition = pointWorldToLocal(this.globalTransform, worldPosition);\n\n    return (\n      localPosition.x >= this.width / -2 &&\n      localPosition.x <= this.width / 2 &&\n      localPosition.y >= this.height / -2 &&\n      localPosition.y <= this.height / 2\n    );\n  }\n}\n\nexport class ClickableCircle extends ClickableEntity {\n  static {\n    Entity.registerType(this, \"@core\");\n  }\n\n  public static readonly icon = \"\uD83D\uDC46\";\n  get bounds(): Readonly<IVector2> | undefined {\n    const size = this.radius * 2;\n    return new Vector2(size, size);\n  }\n\n  radius: number = 1;\n  innerRadus: number = 0;\n\n  constructor(ctx: EntityContext) {\n    super(ctx);\n    this.defineValues(ClickableCircle, \"radius\", \"innerRadus\");\n  }\n\n  public isInBounds(worldPosition: Vector2): boolean {\n    const localPosition = pointWorldToLocal(this.globalTransform, worldPosition);\n\n    const radiusSq = this.radius * this.radius;\n    const innerSq = this.innerRadus * this.innerRadus;\n    const distanceSq = localPosition.magnitudeSquared();\n\n    return distanceSq >= innerSq && distanceSq <= radiusSq;\n  }\n}\n", "import RAPIER from \"@dreamlab/vendor/rapier.ts\";\nimport { IVector2, Vector2 } from \"../../math/mod.ts\";\nimport { EntityPreUpdate, EntityUpdate } from \"../../signals/mod.ts\";\nimport { Entity, EntityContext } from \"../entity.ts\";\n\nexport class RectCollider2D extends Entity {\n  static {\n    Entity.registerType(this, \"@core\");\n  }\n\n  public static readonly icon = \"\u2B1C\";\n  get bounds(): Readonly<IVector2> | undefined {\n    return new Vector2(this.#shape.halfExtents.x * 2, this.#shape.halfExtents.y * 2);\n  }\n\n  collider: RAPIER.Collider;\n  #shape: RAPIER.Cuboid;\n\n  constructor(ctx: EntityContext) {\n    super(ctx);\n\n    const desc = RAPIER.ColliderDesc.cuboid(\n      this.globalTransform.scale.x / 2,\n      this.globalTransform.scale.y / 2,\n    )\n      .setTranslation(this.globalTransform.position.x, this.globalTransform.position.y)\n      .setRotation(this.globalTransform.rotation);\n\n    this.collider = this.game.physics.world.createCollider(desc);\n    this.collider.setActiveEvents(RAPIER.ActiveEvents.COLLISION_EVENTS);\n    this.#shape = this.collider.shape as RAPIER.Cuboid;\n\n    // EntityPreUpdate happens before physics runs, so we can set the physics body to match our transform\n    this.on(EntityPreUpdate, () => {\n      if (!this.game.physics.enabled) return;\n\n      this.collider.setTranslation({\n        x: this.globalTransform.position.x,\n        y: this.globalTransform.position.y,\n      });\n      this.collider.setRotation(this.globalTransform.rotation);\n      this.#shape.halfExtents = {\n        x: this.globalTransform.scale.x / 2,\n        y: this.globalTransform.scale.y / 2,\n      };\n    });\n\n    // EntityUpdate happens after physics runs, so we can update our transform\n    // to reflect the movement of the physics body\n    this.on(EntityUpdate, () => {\n      if (!this.game.physics.enabled) return;\n\n      this.globalTransform.position = new Vector2(this.collider.translation());\n      this.globalTransform.rotation = this.collider.rotation();\n      this.globalTransform.scale = new Vector2(\n        this.#shape.halfExtents.x * 2,\n        this.#shape.halfExtents.y * 2,\n      );\n    });\n  }\n}\n", "import { Entity } from \"../entity.ts\";\n\n/**\n * An entity with nothing but a transform.\n * Used as a container.\n */\nexport class Empty extends Entity {\n  static {\n    Entity.registerType(this, \"@core\");\n  }\n\n  public static readonly icon = \"\uD83D\uDCE6\";\n  readonly bounds = Object.freeze({ x: 0.5, y: 0.5 });\n}\n", "import * as PIXI from \"@dreamlab/vendor/pixi.ts\";\nimport { Vector2 } from \"../../math/mod.ts\";\nimport { pointLocalToWorld, pointWorldToLocal } from \"../../math/spatial-transforms.ts\";\nimport { exclusiveSignalType } from \"../../signal.ts\";\nimport { EntityDestroyed, GameRender, MouseDown } from \"../../signals/mod.ts\";\nimport type { EntityContext } from \"../entity.ts\";\nimport { Entity } from \"../entity.ts\";\nimport { Camera } from \"./camera.ts\";\nimport { ClickableCircle, ClickableRect } from \"./clickable.ts\";\n\n// #region Signals\n// #region Translate\nexport class GizmoTranslateStart {\n  constructor(public readonly axis: \"x\" | \"y\" | \"both\") {}\n  [exclusiveSignalType] = Gizmo;\n}\n\nexport class GizmoTranslateMove {\n  constructor(public readonly position: Vector2) {}\n  [exclusiveSignalType] = Gizmo;\n}\n\nexport class GizmoTranslateEnd {\n  [exclusiveSignalType] = Gizmo;\n}\n// #endregion\n\n// #region Rotate\nexport class GizmoRotateStart {\n  [exclusiveSignalType] = Gizmo;\n}\n\nexport class GizmoRotateMove {\n  constructor(public readonly rotation: number) {}\n  [exclusiveSignalType] = Gizmo;\n}\n\nexport class GizmoRotateEnd {\n  [exclusiveSignalType] = Gizmo;\n}\n// #endregion\n\n// #region Scale\nexport class GizmoScaleStart {\n  constructor(public readonly axis: \"x\" | \"y\" | \"both\") {}\n  [exclusiveSignalType] = Gizmo;\n}\n\nexport class GizmoScaleMove {\n  constructor(public readonly scale: Vector2) {}\n  [exclusiveSignalType] = Gizmo;\n}\n\nexport class GizmoScaleEnd {\n  [exclusiveSignalType] = Gizmo;\n}\n// #endregion\n// #endregion\n\nexport class Gizmo extends Entity {\n  static {\n    Entity.registerType(this, \"@core\");\n  }\n\n  public static readonly icon = \"\u27A1\uFE0F\";\n  readonly bounds: undefined;\n\n  // #region Graphics\n  static #X_COLOR = \"red\";\n  static #Y_COLOR = \"green\";\n  static #Z_COLOR = \"blue\";\n  static #NEUTRAL_COLOR = \"gray\";\n\n  static #ARROW_W = 0.1;\n  static #ARROW_H = 0.15;\n  static #SCALE_S = 0.15;\n\n  static #blankCtx = new PIXI.GraphicsContext();\n\n  static #translateCtx = new PIXI.GraphicsContext()\n    .moveTo(0, 0)\n    .lineTo(1, 0)\n    .stroke({ color: Gizmo.#X_COLOR, width: 0.02 })\n    .moveTo(0, 0)\n    .lineTo(0, -1)\n    .stroke({ color: Gizmo.#Y_COLOR, width: 0.02 })\n    .moveTo(0.2, 0.2)\n    .rect(0.1, -0.4, 0.3, 0.3)\n    .fill({ alpha: 0.2, color: Gizmo.#Z_COLOR })\n    .stroke({ alpha: 0.5, color: Gizmo.#Z_COLOR, width: 0.01 })\n    .poly([1, Gizmo.#ARROW_W / 2, 1, -Gizmo.#ARROW_W / 2, 1 + Gizmo.#ARROW_H, 0])\n    .fill(Gizmo.#X_COLOR)\n    .poly([Gizmo.#ARROW_W / 2, -1, -Gizmo.#ARROW_W / 2, -1, 0, -1 - Gizmo.#ARROW_H])\n    .fill(Gizmo.#Y_COLOR);\n\n  static #rotateCtx = new PIXI.GraphicsContext()\n    .moveTo(-1, 0)\n    .lineTo(1, 0)\n    .stroke({ color: Gizmo.#X_COLOR, width: 0.02, alpha: 0.6 })\n    .moveTo(0, 1)\n    .lineTo(0, -1)\n    .stroke({ color: Gizmo.#Y_COLOR, width: 0.02, alpha: 0.6 })\n    .scale(0.1)\n    .circle(0, 0, 10)\n    .stroke({ color: Gizmo.#NEUTRAL_COLOR, width: 0.02 });\n\n  static #scaleCtx = new PIXI.GraphicsContext()\n    .moveTo(0, 0)\n    .lineTo(1, 0)\n    .stroke({ color: Gizmo.#X_COLOR, width: 0.02 })\n    .moveTo(0, 0)\n    .lineTo(0, -1)\n    .stroke({ color: Gizmo.#Y_COLOR, width: 0.02 })\n    .moveTo(0.2, 0.2)\n    .rect(1, -Gizmo.#SCALE_S / 2, Gizmo.#SCALE_S, Gizmo.#SCALE_S)\n    .fill(Gizmo.#X_COLOR)\n    .rect(-Gizmo.#SCALE_S / 2, -1 - Gizmo.#SCALE_S, Gizmo.#SCALE_S, Gizmo.#SCALE_S)\n    .fill(Gizmo.#Y_COLOR)\n    .rect(0.1, -0.4, 0.3, 0.3)\n    .fill({ alpha: 0.2, color: Gizmo.#Z_COLOR })\n    .stroke({ alpha: 0.5, color: Gizmo.#Z_COLOR, width: 0.01 });\n\n  static #combinedCtx = new PIXI.GraphicsContext()\n    // Lines\n    .moveTo(0, 0)\n    .lineTo(0.7, 0)\n    .stroke({ color: Gizmo.#X_COLOR, width: 0.02 })\n    .moveTo(0, 0)\n    .lineTo(0, -0.7)\n    .stroke({ color: Gizmo.#Y_COLOR, width: 0.02 })\n    // Scale handles\n    .rect(0.7, -Gizmo.#SCALE_S / 2, Gizmo.#SCALE_S, Gizmo.#SCALE_S)\n    .fill(Gizmo.#X_COLOR)\n    .rect(-Gizmo.#SCALE_S / 2, -0.7 - Gizmo.#SCALE_S, Gizmo.#SCALE_S, Gizmo.#SCALE_S)\n    .fill(Gizmo.#Y_COLOR)\n    // Move handles\n    .poly([1.1, Gizmo.#ARROW_W / 2, 1.1, -Gizmo.#ARROW_W / 2, 1.1 + Gizmo.#ARROW_H, 0])\n    .fill(Gizmo.#X_COLOR)\n    .poly([Gizmo.#ARROW_W / 2, -1.1, -Gizmo.#ARROW_W / 2, -1.1, 0, -1.1 - Gizmo.#ARROW_H])\n    .fill(Gizmo.#Y_COLOR)\n    .moveTo(0, 0)\n    .rect(-0.15, -0.15, 0.3, 0.3)\n    .fill({ alpha: 0.2, color: Gizmo.#Z_COLOR })\n    .stroke({ alpha: 0.5, color: Gizmo.#Z_COLOR, width: 0.01 })\n    // Rotation circle\n    .scale(0.1)\n    .circle(0, 0, 10)\n    .stroke({ color: Gizmo.#NEUTRAL_COLOR, width: 0.02 });\n\n  #gfx: PIXI.Graphics | undefined;\n\n  get #ctx() {\n    if (!this.#target) return Gizmo.#blankCtx;\n\n    if (this.mode === \"translate\") return Gizmo.#translateCtx;\n    else if (this.mode === \"rotate\") return Gizmo.#rotateCtx;\n    else if (this.mode === \"scale\") return Gizmo.#scaleCtx;\n    else if (this.mode === \"combined\") return Gizmo.#combinedCtx;\n    else throw new Error(\"invalid mode\");\n  }\n  // #endregion\n\n  // #region Mode\n  #mode: \"translate\" | \"rotate\" | \"scale\" | \"combined\" = \"combined\";\n  get mode() {\n    return this.#mode;\n  }\n  set mode(value) {\n    this.#mode = value;\n    if (this.#gfx) this.#gfx.context = this.#ctx;\n    this.#updateHandles();\n  }\n  // #endregion\n\n  // #region Handles\n  #updateHandles() {\n    // Destroy existing chilldren\n    this.children.forEach(c => c.destroy());\n\n    // Don't spawn handles if no target entity\n    if (!this.#target) return;\n\n    if (this.mode === \"translate\") this.#translateHandles();\n    else if (this.mode === \"rotate\") this.#rotateHandles();\n    else if (this.mode === \"scale\") this.#scaleHandles();\n    else if (this.mode === \"combined\") this.#combinedHandles();\n    else throw new Error(\"invalid mode\");\n  }\n\n  #translateHandles() {\n    const handleSize = Math.max(Gizmo.#ARROW_W, Gizmo.#ARROW_H);\n    const clickSize = handleSize * 1.333;\n\n    const translateX = this.spawn({\n      type: ClickableRect,\n      name: \"TranslateX\",\n      transform: { position: { x: 1 + handleSize / 2, y: 0 } },\n      values: { width: clickSize, height: clickSize },\n    });\n\n    const translateY = this.spawn({\n      type: ClickableRect,\n      name: \"TranslateY\",\n      transform: { position: { x: 0, y: 1 + handleSize / 2 } },\n      values: { width: clickSize, height: clickSize },\n    });\n\n    const translateBoth = this.spawn({\n      type: ClickableRect,\n      name: \"TranslateBoth\",\n      transform: { position: { x: 0.25, y: 0.25 } },\n      values: { width: 0.3, height: 0.3 },\n    });\n\n    const onMouseDown =\n      (axis: \"x\" | \"y\" | \"both\") =>\n      ({ button, cursor: { world } }: MouseDown) => {\n        if (button !== \"left\") return;\n\n        const offset = world.sub(this.globalTransform.position);\n        this.#action = { type: \"translate\", axis, offset };\n        this.fire(GizmoTranslateStart, axis);\n      };\n\n    translateX.on(MouseDown, onMouseDown(\"x\"));\n    translateY.on(MouseDown, onMouseDown(\"y\"));\n    translateBoth.on(MouseDown, onMouseDown(\"both\"));\n  }\n\n  #rotateHandles() {\n    const width = 0.4;\n\n    const rotate = this.spawn({\n      type: ClickableCircle,\n      name: \"Rotate\",\n      values: { radius: 1 + width / 2, innerRadus: 1 - width / 2 },\n    });\n\n    rotate.on(MouseDown, ({ button, cursor: { world } }) => {\n      if (button !== \"left\") return;\n\n      const pos = world.sub(this.globalTransform.position);\n      const rot = Math.atan2(pos.x, pos.y);\n\n      this.#action = { type: \"rotate\", offset: rot + this.globalTransform.rotation };\n      this.fire(GizmoRotateStart);\n    });\n  }\n\n  #scaleHandles() {\n    const handleSize = Gizmo.#SCALE_S;\n    const clickSize = handleSize * 1.333;\n\n    const scaleX = this.spawn({\n      type: ClickableRect,\n      name: \"ScaleX\",\n      transform: { position: { x: 1 + handleSize / 2, y: 0 } },\n      values: { width: clickSize, height: clickSize },\n    });\n\n    const scaleY = this.spawn({\n      type: ClickableRect,\n      name: \"ScaleY\",\n      transform: { position: { x: 0, y: 1 + handleSize / 2 } },\n      values: { width: clickSize, height: clickSize },\n    });\n\n    const scaleBoth = this.spawn({\n      type: ClickableRect,\n      name: \"ScaleBoth\",\n      transform: { position: { x: 0.25, y: 0.25 } },\n      values: { width: 0.3, height: 0.3 },\n    });\n\n    const onMouseDown =\n      (axis: \"x\" | \"y\" | \"both\") =>\n      ({ button, cursor: { world } }: MouseDown) => {\n        if (button !== \"left\") return;\n\n        const offset = world.sub(this.globalTransform.position);\n        const original = this.#target!.globalTransform.scale.clone();\n        this.#action = { type: \"scale\", axis, offset, original };\n        this.fire(GizmoScaleStart, axis);\n      };\n\n    scaleX.on(MouseDown, onMouseDown(\"x\"));\n    scaleY.on(MouseDown, onMouseDown(\"y\"));\n    scaleBoth.on(MouseDown, onMouseDown(\"both\"));\n  }\n\n  #combinedHandles() {\n    const translateHandleSize = Math.max(Gizmo.#ARROW_W, Gizmo.#ARROW_H);\n    const translateClickSize = translateHandleSize * 1.333;\n\n    const translateX = this.spawn({\n      type: ClickableRect,\n      name: \"TranslateX\",\n      transform: { position: { x: 1.1 + translateHandleSize / 2, y: 0 } },\n      values: { width: translateClickSize, height: translateClickSize },\n    });\n\n    const translateY = this.spawn({\n      type: ClickableRect,\n      name: \"TranslateY\",\n      transform: { position: { x: 0, y: 1.1 + translateHandleSize / 2 } },\n      values: { width: translateClickSize, height: translateClickSize },\n    });\n\n    const translateBoth = this.spawn({\n      type: ClickableRect,\n      name: \"TranslateBoth\",\n      transform: { position: { x: 0, y: 0 } },\n      values: { width: 0.3, height: 0.3 },\n    });\n\n    const rotate = this.spawn({\n      type: ClickableCircle,\n      name: \"Rotate\",\n      values: { radius: 1.05, innerRadus: 0.95 },\n    });\n\n    const scaleHandleSize = Gizmo.#SCALE_S;\n    const scaleClickSize = scaleHandleSize * 1.333;\n\n    const scaleX = this.spawn({\n      type: ClickableRect,\n      name: \"ScaleX\",\n      transform: { position: { x: 0.7 + scaleHandleSize / 2, y: 0 } },\n      values: { width: scaleClickSize, height: scaleClickSize },\n    });\n\n    const scaleY = this.spawn({\n      type: ClickableRect,\n      name: \"ScaleY\",\n      transform: { position: { x: 0, y: 0.7 + scaleHandleSize / 2 } },\n      values: { width: scaleClickSize, height: scaleClickSize },\n    });\n\n    const translateOnMouseDown =\n      (axis: \"x\" | \"y\" | \"both\") =>\n      ({ button, cursor: { world } }: MouseDown) => {\n        if (button !== \"left\") return;\n\n        const offset = world.sub(this.globalTransform.position);\n        this.#action = { type: \"translate\", axis, offset };\n        this.fire(GizmoTranslateStart, axis);\n      };\n\n    translateX.on(MouseDown, translateOnMouseDown(\"x\"));\n    translateY.on(MouseDown, translateOnMouseDown(\"y\"));\n    translateBoth.on(MouseDown, translateOnMouseDown(\"both\"));\n\n    rotate.on(MouseDown, ({ button, cursor: { world } }) => {\n      if (button !== \"left\") return;\n\n      const pos = world.sub(this.globalTransform.position);\n      const rot = Math.atan2(pos.x, pos.y);\n\n      this.#action = { type: \"rotate\", offset: rot + this.globalTransform.rotation };\n      this.fire(GizmoRotateStart);\n    });\n\n    const scaleOnMouseDown =\n      (axis: \"x\" | \"y\" | \"both\") =>\n      ({ button, cursor: { world } }: MouseDown) => {\n        if (button !== \"left\") return;\n\n        const offset = world.sub(this.globalTransform.position);\n        const original = this.#target!.globalTransform.scale.clone();\n        this.#action = { type: \"scale\", axis, offset, original };\n        this.fire(GizmoScaleStart, axis);\n      };\n\n    scaleX.on(MouseDown, scaleOnMouseDown(\"x\"));\n    scaleY.on(MouseDown, scaleOnMouseDown(\"y\"));\n  }\n  // #endregion\n\n  // #region Action / Signals\n  #action:\n    | { type: \"translate\"; axis: \"x\" | \"y\" | \"both\"; offset: Vector2 }\n    | { type: \"rotate\"; offset: number }\n    | { type: \"scale\"; axis: \"x\" | \"y\" | \"both\"; offset: Vector2; original: Vector2 }\n    | undefined;\n\n  #onMouseMove = (_: MouseEvent) => {\n    if (!this.#target) return;\n    if (!this.#action) return;\n\n    const cursor = this.inputs.cursor;\n    if (!cursor.world) return;\n\n    if (this.#action.type === \"translate\") {\n      const pos = cursor.world.sub(this.#action.offset);\n\n      const local = pointWorldToLocal(this.globalTransform, pos);\n      if (this.#action.axis === \"x\") local.y = 0;\n      if (this.#action.axis === \"y\") local.x = 0;\n      const world = pointLocalToWorld(this.globalTransform, local);\n\n      this.fire(GizmoTranslateMove, world);\n      this.#target.globalTransform.position = world;\n    } else if (this.#action.type === \"rotate\") {\n      const pos = cursor.world.sub(this.globalTransform.position);\n      const rot = Math.atan2(pos.x, pos.y);\n\n      const rotation = -rot + this.#action.offset;\n      this.fire(GizmoRotateMove, rotation);\n      this.#target.globalTransform.rotation = rotation;\n    } else if (this.#action.type === \"scale\") {\n      const originalDistance = this.#action.offset.magnitude();\n      const offset = cursor.world.sub(this.globalTransform.position);\n      const offsetDistance = offset.magnitude();\n\n      const mul = Vector2.splat(offsetDistance / originalDistance);\n      if (this.#action.axis === \"x\") mul.y = 1;\n      if (this.#action.axis === \"y\") mul.x = 1;\n      const scale = this.#action.original.mul(mul);\n\n      this.fire(GizmoScaleMove, scale);\n      this.#target.globalTransform.scale = scale;\n    }\n  };\n\n  #onMouseUp = (_: MouseEvent) => {\n    if (!this.#action) return;\n\n    if (this.#action.type === \"translate\") {\n      this.fire(GizmoTranslateEnd);\n    } else if (this.#action.type === \"rotate\") {\n      this.fire(GizmoRotateEnd);\n    } else if (this.#action.type === \"scale\") {\n      this.fire(GizmoScaleEnd);\n    }\n\n    this.#action = undefined;\n  };\n  // #endregion\n\n  #target: Entity | undefined;\n  get target(): Entity | undefined {\n    return this.#target;\n  }\n  set target(value: Entity | undefined) {\n    this.#target = value;\n    if (this.#gfx) this.#gfx.context = this.#ctx;\n    this.#updateHandles();\n  }\n\n  constructor(ctx: EntityContext) {\n    super(ctx);\n\n    // Must be a local entity\n    if (ctx.parent !== this.game.local || !this.game.isClient()) {\n      throw new Error(`${this.constructor.name} must be spawned as a local client entity`);\n    }\n\n    this.listen(this.game, GameRender, () => {\n      if (!this.#gfx) return;\n\n      if (this.#target) {\n        this.globalTransform.position = this.#target.globalTransform.position;\n        this.globalTransform.rotation = this.#target.globalTransform.rotation;\n      }\n\n      const pos = this.globalTransform.position;\n      const rotation = this.globalTransform.rotation;\n\n      this.#gfx.position = { x: pos.x, y: -pos.y };\n      this.#gfx.rotation = -rotation;\n\n      const camera = Camera.getActive(this.game);\n      if (camera) {\n        this.#gfx.scale = camera.smoothed.scale;\n        this.globalTransform.scale = camera.smoothed.scale;\n      } else {\n        this.#gfx.scale = 1;\n      }\n    });\n\n    this.on(EntityDestroyed, () => {\n      this.#gfx?.destroy();\n\n      if (this.game.isClient()) {\n        const canvas = this.game.renderer.app.canvas;\n        canvas.removeEventListener(\"mousemove\", this.#onMouseMove);\n        canvas.removeEventListener(\"mouseup\", this.#onMouseUp);\n      }\n    });\n  }\n\n  onInitialize() {\n    if (!this.game.isClient()) return;\n\n    this.#gfx = new PIXI.Graphics(this.#ctx);\n    this.#gfx.zIndex = 9999999999;\n    this.game.renderer.scene.addChild(this.#gfx);\n\n    this.#updateHandles();\n\n    const canvas = this.game.renderer.app.canvas;\n    canvas.addEventListener(\"mousemove\", this.#onMouseMove);\n    canvas.addEventListener(\"mouseup\", this.#onMouseUp);\n  }\n}\n", "import RAPIER from \"@dreamlab/vendor/rapier.ts\";\nimport { IVector2, Vector2 } from \"../../math/mod.ts\";\nimport { EntityDestroyed, EntityPreUpdate, EntityUpdate } from \"../../signals/mod.ts\";\nimport { enumAdapter } from \"../../value/adapters/enum-adapter.ts\";\nimport { ValueChanged } from \"../../value/mod.ts\";\nimport { Entity, EntityContext } from \"../entity.ts\";\n\ntype RigidBodyType = (typeof rigidbodyTypes)[number];\nconst rigidbodyTypes = [\n  \"dynamic\",\n  \"fixed\",\n  // \"kinematic-position\",\n  // \"kinematic-velocity\",\n  // TODO: Implement these nicely\n] as const;\n\nconst RigidbodyTypeAdapter = enumAdapter(rigidbodyTypes);\n\nexport class Rigidbody2D extends Entity {\n  static {\n    Entity.registerType(this, \"@core\");\n  }\n\n  public static readonly icon = \"\u2699\uFE0F\";\n  get bounds(): Readonly<IVector2> | undefined {\n    return new Vector2(this.#shape.halfExtents.x * 2, this.#shape.halfExtents.y * 2);\n  }\n\n  type: RigidBodyType = \"fixed\";\n\n  body!: RAPIER.RigidBody;\n  collider!: RAPIER.Collider;\n  #shape!: RAPIER.Cuboid;\n\n  constructor(ctx: EntityContext) {\n    super(ctx);\n\n    this.defineValue(Rigidbody2D, \"type\", { type: RigidbodyTypeAdapter });\n\n    this.initializeRigidBody();\n\n    const typeValue = this.values.get(\"type\");\n    this.listen(this.game.values, ValueChanged, event => {\n      if (event.value !== typeValue) return;\n\n      this.initializeRigidBody();\n    });\n\n    // EntityPreUpdate happens before physics runs, so we can set the physics body to match our transform\n    this.on(EntityPreUpdate, () => {\n      if (!this.game.physics.enabled) return;\n\n      this.body.setTranslation(\n        {\n          x: this.globalTransform.position.x,\n          y: this.globalTransform.position.y,\n        },\n        false,\n      );\n      this.body.setRotation(this.globalTransform.rotation, false);\n      this.#shape.halfExtents = {\n        x: this.globalTransform.scale.x / 2,\n        y: this.globalTransform.scale.y / 2,\n      };\n    });\n\n    // EntityUpdate happens after physics runs, so we can update our transform\n    // to reflect the movement of the physics body\n    this.on(EntityUpdate, () => {\n      if (!this.game.physics.enabled) return;\n\n      this.globalTransform.position = new Vector2(this.body.translation());\n      this.globalTransform.rotation = this.body.rotation();\n      this.globalTransform.scale = new Vector2(\n        this.#shape.halfExtents.x * 2,\n        this.#shape.halfExtents.y * 2,\n      );\n    });\n\n    this.on(EntityDestroyed, () => {\n      this.game.physics.world.removeRigidBody(this.body);\n    });\n  }\n\n  private initializeRigidBody() {\n    if (this.body) {\n      this.game.physics.world.removeRigidBody(this.body);\n    }\n\n    let desc: RAPIER.RigidBodyDesc;\n    if (this.type === \"dynamic\") desc = RAPIER.RigidBodyDesc.dynamic();\n    else if (this.type === \"fixed\") desc = RAPIER.RigidBodyDesc.fixed();\n    else if (this.type === \"kinematic-position\")\n      desc = RAPIER.RigidBodyDesc.kinematicPositionBased();\n    else if (this.type === \"kinematic-velocity\")\n      desc = RAPIER.RigidBodyDesc.kinematicVelocityBased();\n    else throw new Error(\"invalid rigidbody type\");\n\n    desc = desc\n      .setTranslation(this.globalTransform.position.x, this.globalTransform.position.y)\n      .setRotation(this.globalTransform.rotation);\n\n    this.body = this.game.physics.world.createRigidBody(desc);\n    this.collider = this.game.physics.world.createCollider(\n      RAPIER.ColliderDesc.cuboid(\n        this.globalTransform.scale.x / 2,\n        this.globalTransform.scale.y / 2,\n      ),\n      this.body,\n    );\n    this.collider.setActiveCollisionTypes(\n      RAPIER.ActiveCollisionTypes.DEFAULT |\n        RAPIER.ActiveCollisionTypes.KINEMATIC_FIXED |\n        RAPIER.ActiveCollisionTypes.FIXED_FIXED,\n    );\n    this.collider.setActiveEvents(RAPIER.ActiveEvents.COLLISION_EVENTS);\n    this.#shape = this.collider.shape as RAPIER.Cuboid;\n\n    this.game.physics.registerBody(this, this.body);\n  }\n}\n", "import * as PIXI from \"@dreamlab/vendor/pixi.ts\";\nimport { IVector2, Vector2 } from \"../../math/mod.ts\";\nimport { EntityDestroyed, GameRender } from \"../../signals/mod.ts\";\nimport { TextureAdapter } from \"../../value/adapters/texture-adapter.ts\";\nimport { ValueChanged } from \"../../value/mod.ts\";\nimport { Entity, EntityContext } from \"../entity.ts\";\nimport { PixiEntity } from \"../pixi-entity.ts\";\n\nexport class Sprite2D extends PixiEntity {\n  static {\n    Entity.registerType(this, \"@core\");\n  }\n\n  public static readonly icon = \"\uD83D\uDDBC\uFE0F\";\n  get bounds(): Readonly<IVector2> | undefined {\n    // TODO: Reuse the same vector\n    return new Vector2(this.width, this.height);\n  }\n\n  width: number = 1;\n  height: number = 1;\n  texture: string = \"\";\n  alpha: number = 1;\n\n  sprite: PIXI.Sprite | undefined;\n\n  constructor(ctx: EntityContext) {\n    super(ctx);\n\n    this.defineValues(Sprite2D, \"width\", \"height\", \"alpha\");\n    this.defineValue(Sprite2D, \"texture\", { type: TextureAdapter });\n\n    if (this.texture !== \"\") {\n      PIXI.Assets.backgroundLoad(this.game.resolveResource(this.texture));\n    }\n\n    this.listen(this.game, GameRender, () => {\n      if (!this.sprite) return;\n\n      this.sprite.width = this.width * this.globalTransform.scale.x;\n      this.sprite.height = this.height * this.globalTransform.scale.y;\n      this.sprite.alpha = this.alpha;\n    });\n\n    const textureValue = this.values.get(\"texture\");\n    this.listen(this.game.values, ValueChanged, async event => {\n      if (!this.sprite) return;\n      if (event.value !== textureValue) return;\n\n      const texture = await this.#getTexture();\n      this.sprite.texture = texture;\n    });\n\n    this.on(EntityDestroyed, () => {\n      this.sprite?.destroy();\n    });\n  }\n\n  async #getTexture(): Promise<PIXI.Texture> {\n    if (this.texture === \"\") return PIXI.Texture.WHITE;\n\n    const texture = await PIXI.Assets.load(this.game.resolveResource(this.texture));\n    if (!(texture instanceof PIXI.Texture)) {\n      throw new TypeError(\"texture is not a pixi texture\");\n    }\n\n    return texture;\n  }\n\n  async onInitialize() {\n    super.onInitialize();\n    if (!this.container) return;\n\n    const texture = await this.#getTexture();\n    this.sprite = new PIXI.Sprite({\n      texture,\n      width: this.width * this.globalTransform.scale.x,\n      height: this.height * this.globalTransform.scale.y,\n      anchor: 0.5,\n    });\n\n    this.container.addChild(this.sprite);\n  }\n}\n", "import * as PIXI from \"@dreamlab/vendor/pixi.ts\";\nimport { IVector2, Vector2 } from \"../../math/mod.ts\";\nimport { EntityDestroyed, GameRender } from \"../../signals/mod.ts\";\nimport { TextureAdapter } from \"../../value/adapters/texture-adapter.ts\";\nimport { Vector2Adapter } from \"../../value/adapters/vector-adapter.ts\";\nimport { ValueChanged } from \"../../value/mod.ts\";\nimport { Entity, EntityContext } from \"../entity.ts\";\nimport { PixiEntity } from \"../pixi-entity.ts\";\n\nexport class TilingSprite2D extends PixiEntity {\n  static {\n    Entity.registerType(this, \"@core\");\n  }\n\n  public static readonly icon = \"\uD83D\uDDBC\uFE0F\";\n  get bounds(): Readonly<IVector2> | undefined {\n    // TODO: Reuse the same vector\n    return new Vector2(this.width, this.height);\n  }\n\n  width: number = 1;\n  height: number = 1;\n  texture: string = \"\";\n  alpha: number = 1;\n  tilePosition: Vector2 = Vector2.ZERO;\n  tileRotation: number = 0;\n  tileScale: Vector2 = Vector2.ONE;\n\n  sprite: PIXI.TilingSprite | undefined;\n\n  constructor(ctx: EntityContext) {\n    super(ctx);\n\n    this.defineValues(TilingSprite2D, \"width\", \"height\", \"alpha\", \"tileRotation\");\n    this.defineValue(TilingSprite2D, \"tilePosition\", { type: Vector2Adapter });\n    this.defineValue(TilingSprite2D, \"tileScale\", { type: Vector2Adapter });\n    this.defineValue(TilingSprite2D, \"texture\", { type: TextureAdapter });\n\n    if (this.texture !== \"\") {\n      PIXI.Assets.backgroundLoad(this.game.resolveResource(this.texture));\n    }\n\n    this.listen(this.game, GameRender, () => {\n      if (!this.sprite) return;\n\n      this.sprite.width = this.width * this.globalTransform.scale.x;\n      this.sprite.height = this.height * this.globalTransform.scale.y;\n      this.sprite.alpha = this.alpha;\n      this.sprite.tilePosition = this.tilePosition;\n      this.sprite.tileRotation = this.tileRotation;\n\n      const texture = this.sprite.texture;\n      this.sprite.tileScale = this.tileScale.div({\n        x: texture.width / this.width,\n        y: texture.height / this.height,\n      });\n    });\n\n    const textureValue = this.values.get(\"texture\");\n    this.listen(this.game.values, ValueChanged, async event => {\n      if (!this.sprite) return;\n      if (event.value !== textureValue) return;\n\n      const texture = await this.#getTexture();\n      this.sprite.texture = texture;\n    });\n\n    this.on(EntityDestroyed, () => {\n      this.sprite?.destroy();\n    });\n  }\n\n  async #getTexture(): Promise<PIXI.Texture> {\n    if (this.texture === \"\") return PIXI.Texture.WHITE;\n\n    const texture = await PIXI.Assets.load(this.game.resolveResource(this.texture));\n    if (!(texture instanceof PIXI.Texture)) {\n      throw new TypeError(\"texture is not a pixi texture\");\n    }\n\n    return texture;\n  }\n\n  async onInitialize() {\n    super.onInitialize();\n    if (!this.container) return;\n\n    const texture = await this.#getTexture();\n    this.sprite = new PIXI.TilingSprite(texture);\n\n    this.sprite.width = this.width * this.globalTransform.scale.x;\n    this.sprite.height = this.height * this.globalTransform.scale.y;\n    this.sprite.anchor.set(0.5);\n    this.sprite.alpha = this.alpha;\n    this.sprite.tilePosition = this.tilePosition;\n    this.sprite.tileRotation = this.tileRotation;\n    this.sprite.tileScale = this.tileScale.div({\n      x: texture.width / this.width,\n      y: texture.height / this.height,\n    });\n\n    this.container.addChild(this.sprite);\n  }\n}\n", "import { Entity, EntityContext } from \"../entity.ts\";\nimport { EntityDestroyed } from \"../../signals/mod.ts\";\n\nexport class UILayer extends Entity {\n  static {\n    Entity.registerType(this, \"@core\");\n  }\n\n  public static readonly icon = \"\uD83D\uDDBC\uFE0F\";\n  readonly bounds: undefined;\n\n  #ui: { outer: HTMLDivElement; root: ShadowRoot; element: HTMLDivElement } | undefined;\n  public get dom(): ShadowRoot {\n    if (!this.game.isClient()) {\n      throw new Error(\"cannot access property 'root' on the server\");\n    }\n\n    if (!this.#ui) {\n      throw new Error(`${this.id} has not been initialized`);\n    }\n\n    return this.#ui?.root;\n  }\n\n  public get element(): HTMLDivElement {\n    if (!this.game.isClient()) {\n      throw new Error(\"cannot access property 'element' on the server\");\n    }\n\n    if (!this.#ui) {\n      throw new Error(`${this.id} has not been initialized`);\n    }\n\n    return this.#ui?.element;\n  }\n\n  constructor(ctx: EntityContext) {\n    super(ctx);\n\n    this.on(EntityDestroyed, () => {\n      if (!this.#ui) return;\n\n      this.#ui.element.remove();\n      this.#ui.outer.remove();\n    });\n\n    // TODO: Listen to Z index changes\n  }\n\n  onInitialize() {\n    if (!this.game.isClient()) return;\n\n    const [outer, root] = this.game.ui.create(this);\n    const element = document.createElement(\"div\");\n    this.#ui = { outer, root, element };\n\n    element.id = \"root\";\n    element.style.zIndex = this.z.toString();\n\n    const style = document.createElement(\"style\");\n    const css = `\n#root {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n\n#root > * {\n  pointer-events: auto;\n}\n`;\n\n    style.appendChild(document.createTextNode(css));\n    root.appendChild(style);\n    root.appendChild(element);\n  }\n}\n", "import * as PIXI from \"@dreamlab/vendor/pixi.ts\";\nimport { EntityDestroyed, GameRender } from \"../../signals/mod.ts\";\nimport { Entity, EntityContext } from \"../entity.ts\";\nimport { Camera } from \"./camera.ts\";\n\nexport class UIPanel extends Entity {\n  static {\n    Entity.registerType(this, \"@core\");\n  }\n\n  public static readonly icon = \"\uD83D\uDDBC\uFE0F\";\n  readonly bounds: undefined;\n\n  #ui: { outer: HTMLDivElement; root: ShadowRoot; element: HTMLDivElement } | undefined;\n  public get dom(): ShadowRoot {\n    if (!this.game.isClient()) {\n      throw new Error(\"cannot access property 'root' on the server\");\n    }\n\n    if (!this.#ui) {\n      throw new Error(`${this.id} has not been initialized`);\n    }\n\n    return this.#ui?.root;\n  }\n\n  public get element(): HTMLDivElement {\n    if (!this.game.isClient()) {\n      throw new Error(\"cannot access property 'element' on the server\");\n    }\n\n    if (!this.#ui) {\n      throw new Error(`${this.id} has not been initialized`);\n    }\n\n    return this.#ui?.element;\n  }\n\n  constructor(ctx: EntityContext) {\n    super(ctx);\n\n    this.listen(this.game, GameRender, () => {\n      this.#updateDiv();\n    });\n\n    this.on(EntityDestroyed, () => {\n      if (!this.#ui) return;\n\n      this.#ui.element.remove();\n      this.#ui.outer.remove();\n    });\n  }\n\n  #updateDiv() {\n    if (!this.#ui) return;\n    const { element } = this.#ui;\n\n    // TODO: Culling\n\n    const camera = Camera.getActive(this.game);\n    if (!camera) return; // TODO: Cull when no camera exists\n\n    const pos = this.interpolated.position;\n    const screen = camera.worldToScreen(pos);\n\n    element.style.zIndex = this.z.toString();\n    element.style.left = screen.x.toString() + \"px\";\n    element.style.top = screen.y.toString() + \"px\";\n\n    const { a, b, c, d, tx, ty } = PIXI.Matrix.shared\n      .identity()\n      .rotate(camera.smoothed.rotation - this.interpolated.rotation)\n      .scale(\n        this.globalTransform.scale.x / camera.smoothed.scale.x,\n        this.globalTransform.scale.y / camera.smoothed.scale.y,\n      );\n\n    element.style.transform = `translateX(-50%) translateY(-50%) matrix(${a}, ${b}, ${c}, ${d}, ${tx}, ${ty})`;\n  }\n\n  onInitialize() {\n    if (!this.game.isClient()) return;\n\n    const [outer, root] = this.game.ui.create(this);\n    const element = document.createElement(\"div\");\n    this.#ui = { outer, root, element };\n\n    element.style.pointerEvents = \"auto\";\n    element.style.position = \"absolute\";\n    this.#updateDiv();\n\n    root.appendChild(element);\n  }\n}\n", "import { Entity } from \"../entity/mod.ts\";\nimport { BaseGame } from \"../game.ts\";\nimport { Vector2 } from \"../math/mod.ts\";\nimport { ConnectionId } from \"../network.ts\";\nimport { exclusiveSignalType } from \"../signal.ts\";\n\nexport class EntityPreUpdate {\n  [exclusiveSignalType] = Entity;\n}\n\nexport class EntityUpdate {\n  [exclusiveSignalType] = Entity;\n}\n\nexport class EntityTransformUpdate {\n  constructor() {}\n  [exclusiveSignalType] = Entity;\n}\n\nexport class EntityMove {\n  constructor(\n    public before: Vector2,\n    public current: Vector2,\n  ) {}\n  [exclusiveSignalType] = Entity;\n}\nexport class EntityResize {\n  constructor(\n    public before: Vector2,\n    public current: Vector2,\n  ) {}\n  [exclusiveSignalType] = Entity;\n}\nexport class EntityRotate {\n  constructor(\n    public before: number,\n    public current: number,\n  ) {}\n  [exclusiveSignalType] = Entity;\n}\nexport class EntityZChanged {\n  constructor(\n    public before: number,\n    public current: number,\n  ) {}\n  [exclusiveSignalType] = Entity;\n}\n\nexport class EntityExclusiveAuthorityChanged {\n  constructor(\n    public entity: Entity,\n    public authority: ConnectionId | undefined,\n    public clock: number,\n  ) {}\n  [exclusiveSignalType] = BaseGame;\n}\n"],
  "mappings": "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",
  "names": ["generateCUID", "element", "GameStatus", "PIXI", "PIXI", "PIXI", "PIXI", "local", "scaled", "RAPIER", "RAPIER", "PIXI", "RAPIER", "RAPIER", "PIXI", "PIXI", "element", "PIXI", "element", "generateCUID"]
}
